#pragma warning (disable : 4125)
#pragma once
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ameva.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ameva_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ameva_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "viz.pb.h"
#include "control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ameva_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ameva_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ameva_2eproto;
namespace sl_pb {
class KRAmevaEvent;
class KRAmevaEventDefaultTypeInternal;
extern KRAmevaEventDefaultTypeInternal _KRAmevaEvent_default_instance_;
class KRAmevaResponse;
class KRAmevaResponseDefaultTypeInternal;
extern KRAmevaResponseDefaultTypeInternal _KRAmevaResponse_default_instance_;
}  // namespace sl_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sl_pb::KRAmevaEvent* Arena::CreateMaybeMessage<::sl_pb::KRAmevaEvent>(Arena*);
template<> ::sl_pb::KRAmevaResponse* Arena::CreateMaybeMessage<::sl_pb::KRAmevaResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sl_pb {

enum KRAmevaEvent_FuncToCall : int {
  KRAmevaEvent_FuncToCall_SetTask = 1,
  KRAmevaEvent_FuncToCall_SetEpisode = 2,
  KRAmevaEvent_FuncToCall_DrawMarkerAt = 3,
  KRAmevaEvent_FuncToCall_DrawMarkerTraj = 4,
  KRAmevaEvent_FuncToCall_LoadLevel = 5,
  KRAmevaEvent_FuncToCall_StartLogging = 6,
  KRAmevaEvent_FuncToCall_StopLogging = 7,
  KRAmevaEvent_FuncToCall_GetEpisodeData = 8,
  KRAmevaEvent_FuncToCall_StartSimulation = 9,
  KRAmevaEvent_FuncToCall_StopSimulation = 10,
  KRAmevaEvent_FuncToCall_SetIndividualPose = 11,
  KRAmevaEvent_FuncToCall_ApplyForceTo = 12,
  KRAmevaEvent_FuncToCall_Highlight = 13,
  KRAmevaEvent_FuncToCall_RemoveHighlight = 14,
  KRAmevaEvent_FuncToCall_RemoveAllHighlight = 15
};
bool KRAmevaEvent_FuncToCall_IsValid(int value);
constexpr KRAmevaEvent_FuncToCall KRAmevaEvent_FuncToCall_FuncToCall_MIN = KRAmevaEvent_FuncToCall_SetTask;
constexpr KRAmevaEvent_FuncToCall KRAmevaEvent_FuncToCall_FuncToCall_MAX = KRAmevaEvent_FuncToCall_RemoveAllHighlight;
constexpr int KRAmevaEvent_FuncToCall_FuncToCall_ARRAYSIZE = KRAmevaEvent_FuncToCall_FuncToCall_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KRAmevaEvent_FuncToCall_descriptor();
template<typename T>
inline const std::string& KRAmevaEvent_FuncToCall_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KRAmevaEvent_FuncToCall>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KRAmevaEvent_FuncToCall_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KRAmevaEvent_FuncToCall_descriptor(), enum_t_value);
}
inline bool KRAmevaEvent_FuncToCall_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KRAmevaEvent_FuncToCall* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KRAmevaEvent_FuncToCall>(
    KRAmevaEvent_FuncToCall_descriptor(), name, value);
}
enum KRAmevaResponse_ResponseType : int {
  KRAmevaResponse_ResponseType_Text = 1,
  KRAmevaResponse_ResponseType_FileCreation = 2,
  KRAmevaResponse_ResponseType_FileData = 3,
  KRAmevaResponse_ResponseType_FileFinish = 4
};
bool KRAmevaResponse_ResponseType_IsValid(int value);
constexpr KRAmevaResponse_ResponseType KRAmevaResponse_ResponseType_ResponseType_MIN = KRAmevaResponse_ResponseType_Text;
constexpr KRAmevaResponse_ResponseType KRAmevaResponse_ResponseType_ResponseType_MAX = KRAmevaResponse_ResponseType_FileFinish;
constexpr int KRAmevaResponse_ResponseType_ResponseType_ARRAYSIZE = KRAmevaResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KRAmevaResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& KRAmevaResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KRAmevaResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KRAmevaResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KRAmevaResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool KRAmevaResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KRAmevaResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KRAmevaResponse_ResponseType>(
    KRAmevaResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class KRAmevaEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.KRAmevaEvent) */ {
 public:
  inline KRAmevaEvent() : KRAmevaEvent(nullptr) {}
  virtual ~KRAmevaEvent();

  KRAmevaEvent(const KRAmevaEvent& from);
  KRAmevaEvent(KRAmevaEvent&& from) noexcept
    : KRAmevaEvent() {
    *this = ::std::move(from);
  }

  inline KRAmevaEvent& operator=(const KRAmevaEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KRAmevaEvent& operator=(KRAmevaEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KRAmevaEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KRAmevaEvent* internal_default_instance() {
    return reinterpret_cast<const KRAmevaEvent*>(
               &_KRAmevaEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KRAmevaEvent& a, KRAmevaEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KRAmevaEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KRAmevaEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KRAmevaEvent* New() const final {
    return CreateMaybeMessage<KRAmevaEvent>(nullptr);
  }

  KRAmevaEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KRAmevaEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KRAmevaEvent& from);
  void MergeFrom(const KRAmevaEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KRAmevaEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.KRAmevaEvent";
  }
  protected:
  explicit KRAmevaEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ameva_2eproto);
    return ::descriptor_table_ameva_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KRAmevaEvent_FuncToCall FuncToCall;
  static constexpr FuncToCall SetTask =
    KRAmevaEvent_FuncToCall_SetTask;
  static constexpr FuncToCall SetEpisode =
    KRAmevaEvent_FuncToCall_SetEpisode;
  static constexpr FuncToCall DrawMarkerAt =
    KRAmevaEvent_FuncToCall_DrawMarkerAt;
  static constexpr FuncToCall DrawMarkerTraj =
    KRAmevaEvent_FuncToCall_DrawMarkerTraj;
  static constexpr FuncToCall LoadLevel =
    KRAmevaEvent_FuncToCall_LoadLevel;
  static constexpr FuncToCall StartLogging =
    KRAmevaEvent_FuncToCall_StartLogging;
  static constexpr FuncToCall StopLogging =
    KRAmevaEvent_FuncToCall_StopLogging;
  static constexpr FuncToCall GetEpisodeData =
    KRAmevaEvent_FuncToCall_GetEpisodeData;
  static constexpr FuncToCall StartSimulation =
    KRAmevaEvent_FuncToCall_StartSimulation;
  static constexpr FuncToCall StopSimulation =
    KRAmevaEvent_FuncToCall_StopSimulation;
  static constexpr FuncToCall SetIndividualPose =
    KRAmevaEvent_FuncToCall_SetIndividualPose;
  static constexpr FuncToCall ApplyForceTo =
    KRAmevaEvent_FuncToCall_ApplyForceTo;
  static constexpr FuncToCall Highlight =
    KRAmevaEvent_FuncToCall_Highlight;
  static constexpr FuncToCall RemoveHighlight =
    KRAmevaEvent_FuncToCall_RemoveHighlight;
  static constexpr FuncToCall RemoveAllHighlight =
    KRAmevaEvent_FuncToCall_RemoveAllHighlight;
  static inline bool FuncToCall_IsValid(int value) {
    return KRAmevaEvent_FuncToCall_IsValid(value);
  }
  static constexpr FuncToCall FuncToCall_MIN =
    KRAmevaEvent_FuncToCall_FuncToCall_MIN;
  static constexpr FuncToCall FuncToCall_MAX =
    KRAmevaEvent_FuncToCall_FuncToCall_MAX;
  static constexpr int FuncToCall_ARRAYSIZE =
    KRAmevaEvent_FuncToCall_FuncToCall_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FuncToCall_descriptor() {
    return KRAmevaEvent_FuncToCall_descriptor();
  }
  template<typename T>
  static inline const std::string& FuncToCall_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FuncToCall>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FuncToCall_Name.");
    return KRAmevaEvent_FuncToCall_Name(enum_t_value);
  }
  static inline bool FuncToCall_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FuncToCall* value) {
    return KRAmevaEvent_FuncToCall_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSetTaskParamFieldNumber = 2,
    kSetEpisodeParamsFieldNumber = 3,
    kDrawMarkerAtParamsFieldNumber = 4,
    kDrawMarkerTrajParamsFieldNumber = 5,
    kLoadLevelParamsFieldNumber = 6,
    kStartLoggingParamsFieldNumber = 7,
    kGetEpisodeDataParamsFieldNumber = 8,
    kStartSimulationParamsFieldNumber = 9,
    kStopSimulationParamsFieldNumber = 10,
    kSetIndividualPoseParamsFieldNumber = 11,
    kApplyForceToParamsFieldNumber = 12,
    kHighlightParamsFieldNumber = 13,
    kRemoveHighlightParamsFieldNumber = 14,
    kFuncToCallFieldNumber = 1,
  };
  // optional .sl_pb.SetTaskParams setTaskParam = 2;
  bool has_settaskparam() const;
  private:
  bool _internal_has_settaskparam() const;
  public:
  void clear_settaskparam();
  const ::sl_pb::SetTaskParams& settaskparam() const;
  ::sl_pb::SetTaskParams* release_settaskparam();
  ::sl_pb::SetTaskParams* mutable_settaskparam();
  void set_allocated_settaskparam(::sl_pb::SetTaskParams* settaskparam);
  private:
  const ::sl_pb::SetTaskParams& _internal_settaskparam() const;
  ::sl_pb::SetTaskParams* _internal_mutable_settaskparam();
  public:
  void unsafe_arena_set_allocated_settaskparam(
      ::sl_pb::SetTaskParams* settaskparam);
  ::sl_pb::SetTaskParams* unsafe_arena_release_settaskparam();

  // optional .sl_pb.SetEpisodeParams setEpisodeParams = 3;
  bool has_setepisodeparams() const;
  private:
  bool _internal_has_setepisodeparams() const;
  public:
  void clear_setepisodeparams();
  const ::sl_pb::SetEpisodeParams& setepisodeparams() const;
  ::sl_pb::SetEpisodeParams* release_setepisodeparams();
  ::sl_pb::SetEpisodeParams* mutable_setepisodeparams();
  void set_allocated_setepisodeparams(::sl_pb::SetEpisodeParams* setepisodeparams);
  private:
  const ::sl_pb::SetEpisodeParams& _internal_setepisodeparams() const;
  ::sl_pb::SetEpisodeParams* _internal_mutable_setepisodeparams();
  public:
  void unsafe_arena_set_allocated_setepisodeparams(
      ::sl_pb::SetEpisodeParams* setepisodeparams);
  ::sl_pb::SetEpisodeParams* unsafe_arena_release_setepisodeparams();

  // optional .sl_pb.DrawMarkerAtParams drawMarkerAtParams = 4;
  bool has_drawmarkeratparams() const;
  private:
  bool _internal_has_drawmarkeratparams() const;
  public:
  void clear_drawmarkeratparams();
  const ::sl_pb::DrawMarkerAtParams& drawmarkeratparams() const;
  ::sl_pb::DrawMarkerAtParams* release_drawmarkeratparams();
  ::sl_pb::DrawMarkerAtParams* mutable_drawmarkeratparams();
  void set_allocated_drawmarkeratparams(::sl_pb::DrawMarkerAtParams* drawmarkeratparams);
  private:
  const ::sl_pb::DrawMarkerAtParams& _internal_drawmarkeratparams() const;
  ::sl_pb::DrawMarkerAtParams* _internal_mutable_drawmarkeratparams();
  public:
  void unsafe_arena_set_allocated_drawmarkeratparams(
      ::sl_pb::DrawMarkerAtParams* drawmarkeratparams);
  ::sl_pb::DrawMarkerAtParams* unsafe_arena_release_drawmarkeratparams();

  // optional .sl_pb.DrawMarkerTrajParams drawMarkerTrajParams = 5;
  bool has_drawmarkertrajparams() const;
  private:
  bool _internal_has_drawmarkertrajparams() const;
  public:
  void clear_drawmarkertrajparams();
  const ::sl_pb::DrawMarkerTrajParams& drawmarkertrajparams() const;
  ::sl_pb::DrawMarkerTrajParams* release_drawmarkertrajparams();
  ::sl_pb::DrawMarkerTrajParams* mutable_drawmarkertrajparams();
  void set_allocated_drawmarkertrajparams(::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams);
  private:
  const ::sl_pb::DrawMarkerTrajParams& _internal_drawmarkertrajparams() const;
  ::sl_pb::DrawMarkerTrajParams* _internal_mutable_drawmarkertrajparams();
  public:
  void unsafe_arena_set_allocated_drawmarkertrajparams(
      ::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams);
  ::sl_pb::DrawMarkerTrajParams* unsafe_arena_release_drawmarkertrajparams();

  // optional .sl_pb.LoadLevelParams loadLevelParams = 6;
  bool has_loadlevelparams() const;
  private:
  bool _internal_has_loadlevelparams() const;
  public:
  void clear_loadlevelparams();
  const ::sl_pb::LoadLevelParams& loadlevelparams() const;
  ::sl_pb::LoadLevelParams* release_loadlevelparams();
  ::sl_pb::LoadLevelParams* mutable_loadlevelparams();
  void set_allocated_loadlevelparams(::sl_pb::LoadLevelParams* loadlevelparams);
  private:
  const ::sl_pb::LoadLevelParams& _internal_loadlevelparams() const;
  ::sl_pb::LoadLevelParams* _internal_mutable_loadlevelparams();
  public:
  void unsafe_arena_set_allocated_loadlevelparams(
      ::sl_pb::LoadLevelParams* loadlevelparams);
  ::sl_pb::LoadLevelParams* unsafe_arena_release_loadlevelparams();

  // optional .sl_pb.StartLoggingParams startLoggingParams = 7;
  bool has_startloggingparams() const;
  private:
  bool _internal_has_startloggingparams() const;
  public:
  void clear_startloggingparams();
  const ::sl_pb::StartLoggingParams& startloggingparams() const;
  ::sl_pb::StartLoggingParams* release_startloggingparams();
  ::sl_pb::StartLoggingParams* mutable_startloggingparams();
  void set_allocated_startloggingparams(::sl_pb::StartLoggingParams* startloggingparams);
  private:
  const ::sl_pb::StartLoggingParams& _internal_startloggingparams() const;
  ::sl_pb::StartLoggingParams* _internal_mutable_startloggingparams();
  public:
  void unsafe_arena_set_allocated_startloggingparams(
      ::sl_pb::StartLoggingParams* startloggingparams);
  ::sl_pb::StartLoggingParams* unsafe_arena_release_startloggingparams();

  // optional .sl_pb.GetEpisodeDataParams getEpisodeDataParams = 8;
  bool has_getepisodedataparams() const;
  private:
  bool _internal_has_getepisodedataparams() const;
  public:
  void clear_getepisodedataparams();
  const ::sl_pb::GetEpisodeDataParams& getepisodedataparams() const;
  ::sl_pb::GetEpisodeDataParams* release_getepisodedataparams();
  ::sl_pb::GetEpisodeDataParams* mutable_getepisodedataparams();
  void set_allocated_getepisodedataparams(::sl_pb::GetEpisodeDataParams* getepisodedataparams);
  private:
  const ::sl_pb::GetEpisodeDataParams& _internal_getepisodedataparams() const;
  ::sl_pb::GetEpisodeDataParams* _internal_mutable_getepisodedataparams();
  public:
  void unsafe_arena_set_allocated_getepisodedataparams(
      ::sl_pb::GetEpisodeDataParams* getepisodedataparams);
  ::sl_pb::GetEpisodeDataParams* unsafe_arena_release_getepisodedataparams();

  // optional .sl_pb.StartSimulationParams startSimulationParams = 9;
  bool has_startsimulationparams() const;
  private:
  bool _internal_has_startsimulationparams() const;
  public:
  void clear_startsimulationparams();
  const ::sl_pb::StartSimulationParams& startsimulationparams() const;
  ::sl_pb::StartSimulationParams* release_startsimulationparams();
  ::sl_pb::StartSimulationParams* mutable_startsimulationparams();
  void set_allocated_startsimulationparams(::sl_pb::StartSimulationParams* startsimulationparams);
  private:
  const ::sl_pb::StartSimulationParams& _internal_startsimulationparams() const;
  ::sl_pb::StartSimulationParams* _internal_mutable_startsimulationparams();
  public:
  void unsafe_arena_set_allocated_startsimulationparams(
      ::sl_pb::StartSimulationParams* startsimulationparams);
  ::sl_pb::StartSimulationParams* unsafe_arena_release_startsimulationparams();

  // optional .sl_pb.StopSimulationParams stopSimulationParams = 10;
  bool has_stopsimulationparams() const;
  private:
  bool _internal_has_stopsimulationparams() const;
  public:
  void clear_stopsimulationparams();
  const ::sl_pb::StopSimulationParams& stopsimulationparams() const;
  ::sl_pb::StopSimulationParams* release_stopsimulationparams();
  ::sl_pb::StopSimulationParams* mutable_stopsimulationparams();
  void set_allocated_stopsimulationparams(::sl_pb::StopSimulationParams* stopsimulationparams);
  private:
  const ::sl_pb::StopSimulationParams& _internal_stopsimulationparams() const;
  ::sl_pb::StopSimulationParams* _internal_mutable_stopsimulationparams();
  public:
  void unsafe_arena_set_allocated_stopsimulationparams(
      ::sl_pb::StopSimulationParams* stopsimulationparams);
  ::sl_pb::StopSimulationParams* unsafe_arena_release_stopsimulationparams();

  // optional .sl_pb.SetIndividualPoseParams setIndividualPoseParams = 11;
  bool has_setindividualposeparams() const;
  private:
  bool _internal_has_setindividualposeparams() const;
  public:
  void clear_setindividualposeparams();
  const ::sl_pb::SetIndividualPoseParams& setindividualposeparams() const;
  ::sl_pb::SetIndividualPoseParams* release_setindividualposeparams();
  ::sl_pb::SetIndividualPoseParams* mutable_setindividualposeparams();
  void set_allocated_setindividualposeparams(::sl_pb::SetIndividualPoseParams* setindividualposeparams);
  private:
  const ::sl_pb::SetIndividualPoseParams& _internal_setindividualposeparams() const;
  ::sl_pb::SetIndividualPoseParams* _internal_mutable_setindividualposeparams();
  public:
  void unsafe_arena_set_allocated_setindividualposeparams(
      ::sl_pb::SetIndividualPoseParams* setindividualposeparams);
  ::sl_pb::SetIndividualPoseParams* unsafe_arena_release_setindividualposeparams();

  // optional .sl_pb.ApplyForceToParams applyForceToParams = 12;
  bool has_applyforcetoparams() const;
  private:
  bool _internal_has_applyforcetoparams() const;
  public:
  void clear_applyforcetoparams();
  const ::sl_pb::ApplyForceToParams& applyforcetoparams() const;
  ::sl_pb::ApplyForceToParams* release_applyforcetoparams();
  ::sl_pb::ApplyForceToParams* mutable_applyforcetoparams();
  void set_allocated_applyforcetoparams(::sl_pb::ApplyForceToParams* applyforcetoparams);
  private:
  const ::sl_pb::ApplyForceToParams& _internal_applyforcetoparams() const;
  ::sl_pb::ApplyForceToParams* _internal_mutable_applyforcetoparams();
  public:
  void unsafe_arena_set_allocated_applyforcetoparams(
      ::sl_pb::ApplyForceToParams* applyforcetoparams);
  ::sl_pb::ApplyForceToParams* unsafe_arena_release_applyforcetoparams();

  // optional .sl_pb.HighlightParams highlightParams = 13;
  bool has_highlightparams() const;
  private:
  bool _internal_has_highlightparams() const;
  public:
  void clear_highlightparams();
  const ::sl_pb::HighlightParams& highlightparams() const;
  ::sl_pb::HighlightParams* release_highlightparams();
  ::sl_pb::HighlightParams* mutable_highlightparams();
  void set_allocated_highlightparams(::sl_pb::HighlightParams* highlightparams);
  private:
  const ::sl_pb::HighlightParams& _internal_highlightparams() const;
  ::sl_pb::HighlightParams* _internal_mutable_highlightparams();
  public:
  void unsafe_arena_set_allocated_highlightparams(
      ::sl_pb::HighlightParams* highlightparams);
  ::sl_pb::HighlightParams* unsafe_arena_release_highlightparams();

  // optional .sl_pb.RemoveHighlightParams removeHighlightParams = 14;
  bool has_removehighlightparams() const;
  private:
  bool _internal_has_removehighlightparams() const;
  public:
  void clear_removehighlightparams();
  const ::sl_pb::RemoveHighlightParams& removehighlightparams() const;
  ::sl_pb::RemoveHighlightParams* release_removehighlightparams();
  ::sl_pb::RemoveHighlightParams* mutable_removehighlightparams();
  void set_allocated_removehighlightparams(::sl_pb::RemoveHighlightParams* removehighlightparams);
  private:
  const ::sl_pb::RemoveHighlightParams& _internal_removehighlightparams() const;
  ::sl_pb::RemoveHighlightParams* _internal_mutable_removehighlightparams();
  public:
  void unsafe_arena_set_allocated_removehighlightparams(
      ::sl_pb::RemoveHighlightParams* removehighlightparams);
  ::sl_pb::RemoveHighlightParams* unsafe_arena_release_removehighlightparams();

  // required .sl_pb.KRAmevaEvent.FuncToCall funcToCall = 1;
  bool has_functocall() const;
  private:
  bool _internal_has_functocall() const;
  public:
  void clear_functocall();
  ::sl_pb::KRAmevaEvent_FuncToCall functocall() const;
  void set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value);
  private:
  ::sl_pb::KRAmevaEvent_FuncToCall _internal_functocall() const;
  void _internal_set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.KRAmevaEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sl_pb::SetTaskParams* settaskparam_;
  ::sl_pb::SetEpisodeParams* setepisodeparams_;
  ::sl_pb::DrawMarkerAtParams* drawmarkeratparams_;
  ::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams_;
  ::sl_pb::LoadLevelParams* loadlevelparams_;
  ::sl_pb::StartLoggingParams* startloggingparams_;
  ::sl_pb::GetEpisodeDataParams* getepisodedataparams_;
  ::sl_pb::StartSimulationParams* startsimulationparams_;
  ::sl_pb::StopSimulationParams* stopsimulationparams_;
  ::sl_pb::SetIndividualPoseParams* setindividualposeparams_;
  ::sl_pb::ApplyForceToParams* applyforcetoparams_;
  ::sl_pb::HighlightParams* highlightparams_;
  ::sl_pb::RemoveHighlightParams* removehighlightparams_;
  int functocall_;
  friend struct ::TableStruct_ameva_2eproto;
};
// -------------------------------------------------------------------

class KRAmevaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.KRAmevaResponse) */ {
 public:
  inline KRAmevaResponse() : KRAmevaResponse(nullptr) {}
  virtual ~KRAmevaResponse();

  KRAmevaResponse(const KRAmevaResponse& from);
  KRAmevaResponse(KRAmevaResponse&& from) noexcept
    : KRAmevaResponse() {
    *this = ::std::move(from);
  }

  inline KRAmevaResponse& operator=(const KRAmevaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KRAmevaResponse& operator=(KRAmevaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KRAmevaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KRAmevaResponse* internal_default_instance() {
    return reinterpret_cast<const KRAmevaResponse*>(
               &_KRAmevaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KRAmevaResponse& a, KRAmevaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KRAmevaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KRAmevaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KRAmevaResponse* New() const final {
    return CreateMaybeMessage<KRAmevaResponse>(nullptr);
  }

  KRAmevaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KRAmevaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KRAmevaResponse& from);
  void MergeFrom(const KRAmevaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KRAmevaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.KRAmevaResponse";
  }
  protected:
  explicit KRAmevaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ameva_2eproto);
    return ::descriptor_table_ameva_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KRAmevaResponse_ResponseType ResponseType;
  static constexpr ResponseType Text =
    KRAmevaResponse_ResponseType_Text;
  static constexpr ResponseType FileCreation =
    KRAmevaResponse_ResponseType_FileCreation;
  static constexpr ResponseType FileData =
    KRAmevaResponse_ResponseType_FileData;
  static constexpr ResponseType FileFinish =
    KRAmevaResponse_ResponseType_FileFinish;
  static inline bool ResponseType_IsValid(int value) {
    return KRAmevaResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    KRAmevaResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    KRAmevaResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    KRAmevaResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return KRAmevaResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return KRAmevaResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return KRAmevaResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kFileDataFieldNumber = 4,
    kDataLengthFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string fileName = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bytes fileData = 4;
  bool has_filedata() const;
  private:
  bool _internal_has_filedata() const;
  public:
  void clear_filedata();
  const std::string& filedata() const;
  void set_filedata(const std::string& value);
  void set_filedata(std::string&& value);
  void set_filedata(const char* value);
  void set_filedata(const void* value, size_t size);
  std::string* mutable_filedata();
  std::string* release_filedata();
  void set_allocated_filedata(std::string* filedata);
  private:
  const std::string& _internal_filedata() const;
  void _internal_set_filedata(const std::string& value);
  std::string* _internal_mutable_filedata();
  public:

  // optional int32 dataLength = 5;
  bool has_datalength() const;
  private:
  bool _internal_has_datalength() const;
  public:
  void clear_datalength();
  ::PROTOBUF_NAMESPACE_ID::int32 datalength() const;
  void set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datalength() const;
  void _internal_set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .sl_pb.KRAmevaResponse.ResponseType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sl_pb::KRAmevaResponse_ResponseType type() const;
  void set_type(::sl_pb::KRAmevaResponse_ResponseType value);
  private:
  ::sl_pb::KRAmevaResponse_ResponseType _internal_type() const;
  void _internal_set_type(::sl_pb::KRAmevaResponse_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.KRAmevaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filedata_;
  ::PROTOBUF_NAMESPACE_ID::int32 datalength_;
  int type_;
  friend struct ::TableStruct_ameva_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KRAmevaEvent

// required .sl_pb.KRAmevaEvent.FuncToCall funcToCall = 1;
inline bool KRAmevaEvent::_internal_has_functocall() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KRAmevaEvent::has_functocall() const {
  return _internal_has_functocall();
}
inline void KRAmevaEvent::clear_functocall() {
  functocall_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::sl_pb::KRAmevaEvent_FuncToCall KRAmevaEvent::_internal_functocall() const {
  return static_cast< ::sl_pb::KRAmevaEvent_FuncToCall >(functocall_);
}
inline ::sl_pb::KRAmevaEvent_FuncToCall KRAmevaEvent::functocall() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.funcToCall)
  return _internal_functocall();
}
inline void KRAmevaEvent::_internal_set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value) {
  assert(::sl_pb::KRAmevaEvent_FuncToCall_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  functocall_ = value;
}
inline void KRAmevaEvent::set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value) {
  _internal_set_functocall(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaEvent.funcToCall)
}

// optional .sl_pb.SetTaskParams setTaskParam = 2;
inline bool KRAmevaEvent::_internal_has_settaskparam() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settaskparam_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_settaskparam() const {
  return _internal_has_settaskparam();
}
inline const ::sl_pb::SetTaskParams& KRAmevaEvent::_internal_settaskparam() const {
  const ::sl_pb::SetTaskParams* p = settaskparam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::SetTaskParams*>(
      &::sl_pb::_SetTaskParams_default_instance_);
}
inline const ::sl_pb::SetTaskParams& KRAmevaEvent::settaskparam() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.setTaskParam)
  return _internal_settaskparam();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_settaskparam(
    ::sl_pb::SetTaskParams* settaskparam) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settaskparam_);
  }
  settaskparam_ = settaskparam;
  if (settaskparam) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.setTaskParam)
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::release_settaskparam() {
  _has_bits_[0] &= ~0x00000001u;
  ::sl_pb::SetTaskParams* temp = settaskparam_;
  settaskparam_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::unsafe_arena_release_settaskparam() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.setTaskParam)
  _has_bits_[0] &= ~0x00000001u;
  ::sl_pb::SetTaskParams* temp = settaskparam_;
  settaskparam_ = nullptr;
  return temp;
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::_internal_mutable_settaskparam() {
  _has_bits_[0] |= 0x00000001u;
  if (settaskparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::SetTaskParams>(GetArena());
    settaskparam_ = p;
  }
  return settaskparam_;
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::mutable_settaskparam() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.setTaskParam)
  return _internal_mutable_settaskparam();
}
inline void KRAmevaEvent::set_allocated_settaskparam(::sl_pb::SetTaskParams* settaskparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settaskparam_);
  }
  if (settaskparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settaskparam)->GetArena();
    if (message_arena != submessage_arena) {
      settaskparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settaskparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settaskparam_ = settaskparam;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.setTaskParam)
}

// optional .sl_pb.SetEpisodeParams setEpisodeParams = 3;
inline bool KRAmevaEvent::_internal_has_setepisodeparams() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || setepisodeparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_setepisodeparams() const {
  return _internal_has_setepisodeparams();
}
inline const ::sl_pb::SetEpisodeParams& KRAmevaEvent::_internal_setepisodeparams() const {
  const ::sl_pb::SetEpisodeParams* p = setepisodeparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::SetEpisodeParams*>(
      &::sl_pb::_SetEpisodeParams_default_instance_);
}
inline const ::sl_pb::SetEpisodeParams& KRAmevaEvent::setepisodeparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.setEpisodeParams)
  return _internal_setepisodeparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_setepisodeparams(
    ::sl_pb::SetEpisodeParams* setepisodeparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setepisodeparams_);
  }
  setepisodeparams_ = setepisodeparams;
  if (setepisodeparams) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.setEpisodeParams)
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::release_setepisodeparams() {
  _has_bits_[0] &= ~0x00000002u;
  ::sl_pb::SetEpisodeParams* temp = setepisodeparams_;
  setepisodeparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::unsafe_arena_release_setepisodeparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.setEpisodeParams)
  _has_bits_[0] &= ~0x00000002u;
  ::sl_pb::SetEpisodeParams* temp = setepisodeparams_;
  setepisodeparams_ = nullptr;
  return temp;
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::_internal_mutable_setepisodeparams() {
  _has_bits_[0] |= 0x00000002u;
  if (setepisodeparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::SetEpisodeParams>(GetArena());
    setepisodeparams_ = p;
  }
  return setepisodeparams_;
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::mutable_setepisodeparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.setEpisodeParams)
  return _internal_mutable_setepisodeparams();
}
inline void KRAmevaEvent::set_allocated_setepisodeparams(::sl_pb::SetEpisodeParams* setepisodeparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setepisodeparams_);
  }
  if (setepisodeparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setepisodeparams)->GetArena();
    if (message_arena != submessage_arena) {
      setepisodeparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setepisodeparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  setepisodeparams_ = setepisodeparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.setEpisodeParams)
}

// optional .sl_pb.DrawMarkerAtParams drawMarkerAtParams = 4;
inline bool KRAmevaEvent::_internal_has_drawmarkeratparams() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drawmarkeratparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_drawmarkeratparams() const {
  return _internal_has_drawmarkeratparams();
}
inline const ::sl_pb::DrawMarkerAtParams& KRAmevaEvent::_internal_drawmarkeratparams() const {
  const ::sl_pb::DrawMarkerAtParams* p = drawmarkeratparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::DrawMarkerAtParams*>(
      &::sl_pb::_DrawMarkerAtParams_default_instance_);
}
inline const ::sl_pb::DrawMarkerAtParams& KRAmevaEvent::drawmarkeratparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.drawMarkerAtParams)
  return _internal_drawmarkeratparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_drawmarkeratparams(
    ::sl_pb::DrawMarkerAtParams* drawmarkeratparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkeratparams_);
  }
  drawmarkeratparams_ = drawmarkeratparams;
  if (drawmarkeratparams) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.drawMarkerAtParams)
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::release_drawmarkeratparams() {
  _has_bits_[0] &= ~0x00000004u;
  ::sl_pb::DrawMarkerAtParams* temp = drawmarkeratparams_;
  drawmarkeratparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::unsafe_arena_release_drawmarkeratparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.drawMarkerAtParams)
  _has_bits_[0] &= ~0x00000004u;
  ::sl_pb::DrawMarkerAtParams* temp = drawmarkeratparams_;
  drawmarkeratparams_ = nullptr;
  return temp;
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::_internal_mutable_drawmarkeratparams() {
  _has_bits_[0] |= 0x00000004u;
  if (drawmarkeratparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::DrawMarkerAtParams>(GetArena());
    drawmarkeratparams_ = p;
  }
  return drawmarkeratparams_;
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::mutable_drawmarkeratparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.drawMarkerAtParams)
  return _internal_mutable_drawmarkeratparams();
}
inline void KRAmevaEvent::set_allocated_drawmarkeratparams(::sl_pb::DrawMarkerAtParams* drawmarkeratparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkeratparams_);
  }
  if (drawmarkeratparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkeratparams)->GetArena();
    if (message_arena != submessage_arena) {
      drawmarkeratparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawmarkeratparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drawmarkeratparams_ = drawmarkeratparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.drawMarkerAtParams)
}

// optional .sl_pb.DrawMarkerTrajParams drawMarkerTrajParams = 5;
inline bool KRAmevaEvent::_internal_has_drawmarkertrajparams() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || drawmarkertrajparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_drawmarkertrajparams() const {
  return _internal_has_drawmarkertrajparams();
}
inline const ::sl_pb::DrawMarkerTrajParams& KRAmevaEvent::_internal_drawmarkertrajparams() const {
  const ::sl_pb::DrawMarkerTrajParams* p = drawmarkertrajparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::DrawMarkerTrajParams*>(
      &::sl_pb::_DrawMarkerTrajParams_default_instance_);
}
inline const ::sl_pb::DrawMarkerTrajParams& KRAmevaEvent::drawmarkertrajparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
  return _internal_drawmarkertrajparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_drawmarkertrajparams(
    ::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkertrajparams_);
  }
  drawmarkertrajparams_ = drawmarkertrajparams;
  if (drawmarkertrajparams) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::release_drawmarkertrajparams() {
  _has_bits_[0] &= ~0x00000008u;
  ::sl_pb::DrawMarkerTrajParams* temp = drawmarkertrajparams_;
  drawmarkertrajparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::unsafe_arena_release_drawmarkertrajparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
  _has_bits_[0] &= ~0x00000008u;
  ::sl_pb::DrawMarkerTrajParams* temp = drawmarkertrajparams_;
  drawmarkertrajparams_ = nullptr;
  return temp;
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::_internal_mutable_drawmarkertrajparams() {
  _has_bits_[0] |= 0x00000008u;
  if (drawmarkertrajparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::DrawMarkerTrajParams>(GetArena());
    drawmarkertrajparams_ = p;
  }
  return drawmarkertrajparams_;
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::mutable_drawmarkertrajparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
  return _internal_mutable_drawmarkertrajparams();
}
inline void KRAmevaEvent::set_allocated_drawmarkertrajparams(::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkertrajparams_);
  }
  if (drawmarkertrajparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkertrajparams)->GetArena();
    if (message_arena != submessage_arena) {
      drawmarkertrajparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawmarkertrajparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  drawmarkertrajparams_ = drawmarkertrajparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
}

// optional .sl_pb.LoadLevelParams loadLevelParams = 6;
inline bool KRAmevaEvent::_internal_has_loadlevelparams() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || loadlevelparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_loadlevelparams() const {
  return _internal_has_loadlevelparams();
}
inline const ::sl_pb::LoadLevelParams& KRAmevaEvent::_internal_loadlevelparams() const {
  const ::sl_pb::LoadLevelParams* p = loadlevelparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::LoadLevelParams*>(
      &::sl_pb::_LoadLevelParams_default_instance_);
}
inline const ::sl_pb::LoadLevelParams& KRAmevaEvent::loadlevelparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.loadLevelParams)
  return _internal_loadlevelparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_loadlevelparams(
    ::sl_pb::LoadLevelParams* loadlevelparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadlevelparams_);
  }
  loadlevelparams_ = loadlevelparams;
  if (loadlevelparams) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.loadLevelParams)
}
inline ::sl_pb::LoadLevelParams* KRAmevaEvent::release_loadlevelparams() {
  _has_bits_[0] &= ~0x00000010u;
  ::sl_pb::LoadLevelParams* temp = loadlevelparams_;
  loadlevelparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::LoadLevelParams* KRAmevaEvent::unsafe_arena_release_loadlevelparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.loadLevelParams)
  _has_bits_[0] &= ~0x00000010u;
  ::sl_pb::LoadLevelParams* temp = loadlevelparams_;
  loadlevelparams_ = nullptr;
  return temp;
}
inline ::sl_pb::LoadLevelParams* KRAmevaEvent::_internal_mutable_loadlevelparams() {
  _has_bits_[0] |= 0x00000010u;
  if (loadlevelparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::LoadLevelParams>(GetArena());
    loadlevelparams_ = p;
  }
  return loadlevelparams_;
}
inline ::sl_pb::LoadLevelParams* KRAmevaEvent::mutable_loadlevelparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.loadLevelParams)
  return _internal_mutable_loadlevelparams();
}
inline void KRAmevaEvent::set_allocated_loadlevelparams(::sl_pb::LoadLevelParams* loadlevelparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadlevelparams_);
  }
  if (loadlevelparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadlevelparams)->GetArena();
    if (message_arena != submessage_arena) {
      loadlevelparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadlevelparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  loadlevelparams_ = loadlevelparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.loadLevelParams)
}

// optional .sl_pb.StartLoggingParams startLoggingParams = 7;
inline bool KRAmevaEvent::_internal_has_startloggingparams() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || startloggingparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_startloggingparams() const {
  return _internal_has_startloggingparams();
}
inline const ::sl_pb::StartLoggingParams& KRAmevaEvent::_internal_startloggingparams() const {
  const ::sl_pb::StartLoggingParams* p = startloggingparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::StartLoggingParams*>(
      &::sl_pb::_StartLoggingParams_default_instance_);
}
inline const ::sl_pb::StartLoggingParams& KRAmevaEvent::startloggingparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.startLoggingParams)
  return _internal_startloggingparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_startloggingparams(
    ::sl_pb::StartLoggingParams* startloggingparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startloggingparams_);
  }
  startloggingparams_ = startloggingparams;
  if (startloggingparams) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.startLoggingParams)
}
inline ::sl_pb::StartLoggingParams* KRAmevaEvent::release_startloggingparams() {
  _has_bits_[0] &= ~0x00000020u;
  ::sl_pb::StartLoggingParams* temp = startloggingparams_;
  startloggingparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::StartLoggingParams* KRAmevaEvent::unsafe_arena_release_startloggingparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.startLoggingParams)
  _has_bits_[0] &= ~0x00000020u;
  ::sl_pb::StartLoggingParams* temp = startloggingparams_;
  startloggingparams_ = nullptr;
  return temp;
}
inline ::sl_pb::StartLoggingParams* KRAmevaEvent::_internal_mutable_startloggingparams() {
  _has_bits_[0] |= 0x00000020u;
  if (startloggingparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::StartLoggingParams>(GetArena());
    startloggingparams_ = p;
  }
  return startloggingparams_;
}
inline ::sl_pb::StartLoggingParams* KRAmevaEvent::mutable_startloggingparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.startLoggingParams)
  return _internal_mutable_startloggingparams();
}
inline void KRAmevaEvent::set_allocated_startloggingparams(::sl_pb::StartLoggingParams* startloggingparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startloggingparams_);
  }
  if (startloggingparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startloggingparams)->GetArena();
    if (message_arena != submessage_arena) {
      startloggingparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startloggingparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  startloggingparams_ = startloggingparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.startLoggingParams)
}

// optional .sl_pb.GetEpisodeDataParams getEpisodeDataParams = 8;
inline bool KRAmevaEvent::_internal_has_getepisodedataparams() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || getepisodedataparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_getepisodedataparams() const {
  return _internal_has_getepisodedataparams();
}
inline const ::sl_pb::GetEpisodeDataParams& KRAmevaEvent::_internal_getepisodedataparams() const {
  const ::sl_pb::GetEpisodeDataParams* p = getepisodedataparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::GetEpisodeDataParams*>(
      &::sl_pb::_GetEpisodeDataParams_default_instance_);
}
inline const ::sl_pb::GetEpisodeDataParams& KRAmevaEvent::getepisodedataparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.getEpisodeDataParams)
  return _internal_getepisodedataparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_getepisodedataparams(
    ::sl_pb::GetEpisodeDataParams* getepisodedataparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getepisodedataparams_);
  }
  getepisodedataparams_ = getepisodedataparams;
  if (getepisodedataparams) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.getEpisodeDataParams)
}
inline ::sl_pb::GetEpisodeDataParams* KRAmevaEvent::release_getepisodedataparams() {
  _has_bits_[0] &= ~0x00000040u;
  ::sl_pb::GetEpisodeDataParams* temp = getepisodedataparams_;
  getepisodedataparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::GetEpisodeDataParams* KRAmevaEvent::unsafe_arena_release_getepisodedataparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.getEpisodeDataParams)
  _has_bits_[0] &= ~0x00000040u;
  ::sl_pb::GetEpisodeDataParams* temp = getepisodedataparams_;
  getepisodedataparams_ = nullptr;
  return temp;
}
inline ::sl_pb::GetEpisodeDataParams* KRAmevaEvent::_internal_mutable_getepisodedataparams() {
  _has_bits_[0] |= 0x00000040u;
  if (getepisodedataparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::GetEpisodeDataParams>(GetArena());
    getepisodedataparams_ = p;
  }
  return getepisodedataparams_;
}
inline ::sl_pb::GetEpisodeDataParams* KRAmevaEvent::mutable_getepisodedataparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.getEpisodeDataParams)
  return _internal_mutable_getepisodedataparams();
}
inline void KRAmevaEvent::set_allocated_getepisodedataparams(::sl_pb::GetEpisodeDataParams* getepisodedataparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(getepisodedataparams_);
  }
  if (getepisodedataparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getepisodedataparams)->GetArena();
    if (message_arena != submessage_arena) {
      getepisodedataparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getepisodedataparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  getepisodedataparams_ = getepisodedataparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.getEpisodeDataParams)
}

// optional .sl_pb.StartSimulationParams startSimulationParams = 9;
inline bool KRAmevaEvent::_internal_has_startsimulationparams() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || startsimulationparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_startsimulationparams() const {
  return _internal_has_startsimulationparams();
}
inline const ::sl_pb::StartSimulationParams& KRAmevaEvent::_internal_startsimulationparams() const {
  const ::sl_pb::StartSimulationParams* p = startsimulationparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::StartSimulationParams*>(
      &::sl_pb::_StartSimulationParams_default_instance_);
}
inline const ::sl_pb::StartSimulationParams& KRAmevaEvent::startsimulationparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.startSimulationParams)
  return _internal_startsimulationparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_startsimulationparams(
    ::sl_pb::StartSimulationParams* startsimulationparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startsimulationparams_);
  }
  startsimulationparams_ = startsimulationparams;
  if (startsimulationparams) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.startSimulationParams)
}
inline ::sl_pb::StartSimulationParams* KRAmevaEvent::release_startsimulationparams() {
  _has_bits_[0] &= ~0x00000080u;
  ::sl_pb::StartSimulationParams* temp = startsimulationparams_;
  startsimulationparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::StartSimulationParams* KRAmevaEvent::unsafe_arena_release_startsimulationparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.startSimulationParams)
  _has_bits_[0] &= ~0x00000080u;
  ::sl_pb::StartSimulationParams* temp = startsimulationparams_;
  startsimulationparams_ = nullptr;
  return temp;
}
inline ::sl_pb::StartSimulationParams* KRAmevaEvent::_internal_mutable_startsimulationparams() {
  _has_bits_[0] |= 0x00000080u;
  if (startsimulationparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::StartSimulationParams>(GetArena());
    startsimulationparams_ = p;
  }
  return startsimulationparams_;
}
inline ::sl_pb::StartSimulationParams* KRAmevaEvent::mutable_startsimulationparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.startSimulationParams)
  return _internal_mutable_startsimulationparams();
}
inline void KRAmevaEvent::set_allocated_startsimulationparams(::sl_pb::StartSimulationParams* startsimulationparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startsimulationparams_);
  }
  if (startsimulationparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startsimulationparams)->GetArena();
    if (message_arena != submessage_arena) {
      startsimulationparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startsimulationparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  startsimulationparams_ = startsimulationparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.startSimulationParams)
}

// optional .sl_pb.StopSimulationParams stopSimulationParams = 10;
inline bool KRAmevaEvent::_internal_has_stopsimulationparams() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || stopsimulationparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_stopsimulationparams() const {
  return _internal_has_stopsimulationparams();
}
inline const ::sl_pb::StopSimulationParams& KRAmevaEvent::_internal_stopsimulationparams() const {
  const ::sl_pb::StopSimulationParams* p = stopsimulationparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::StopSimulationParams*>(
      &::sl_pb::_StopSimulationParams_default_instance_);
}
inline const ::sl_pb::StopSimulationParams& KRAmevaEvent::stopsimulationparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.stopSimulationParams)
  return _internal_stopsimulationparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_stopsimulationparams(
    ::sl_pb::StopSimulationParams* stopsimulationparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopsimulationparams_);
  }
  stopsimulationparams_ = stopsimulationparams;
  if (stopsimulationparams) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.stopSimulationParams)
}
inline ::sl_pb::StopSimulationParams* KRAmevaEvent::release_stopsimulationparams() {
  _has_bits_[0] &= ~0x00000100u;
  ::sl_pb::StopSimulationParams* temp = stopsimulationparams_;
  stopsimulationparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::StopSimulationParams* KRAmevaEvent::unsafe_arena_release_stopsimulationparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.stopSimulationParams)
  _has_bits_[0] &= ~0x00000100u;
  ::sl_pb::StopSimulationParams* temp = stopsimulationparams_;
  stopsimulationparams_ = nullptr;
  return temp;
}
inline ::sl_pb::StopSimulationParams* KRAmevaEvent::_internal_mutable_stopsimulationparams() {
  _has_bits_[0] |= 0x00000100u;
  if (stopsimulationparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::StopSimulationParams>(GetArena());
    stopsimulationparams_ = p;
  }
  return stopsimulationparams_;
}
inline ::sl_pb::StopSimulationParams* KRAmevaEvent::mutable_stopsimulationparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.stopSimulationParams)
  return _internal_mutable_stopsimulationparams();
}
inline void KRAmevaEvent::set_allocated_stopsimulationparams(::sl_pb::StopSimulationParams* stopsimulationparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopsimulationparams_);
  }
  if (stopsimulationparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopsimulationparams)->GetArena();
    if (message_arena != submessage_arena) {
      stopsimulationparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopsimulationparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  stopsimulationparams_ = stopsimulationparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.stopSimulationParams)
}

// optional .sl_pb.SetIndividualPoseParams setIndividualPoseParams = 11;
inline bool KRAmevaEvent::_internal_has_setindividualposeparams() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || setindividualposeparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_setindividualposeparams() const {
  return _internal_has_setindividualposeparams();
}
inline const ::sl_pb::SetIndividualPoseParams& KRAmevaEvent::_internal_setindividualposeparams() const {
  const ::sl_pb::SetIndividualPoseParams* p = setindividualposeparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::SetIndividualPoseParams*>(
      &::sl_pb::_SetIndividualPoseParams_default_instance_);
}
inline const ::sl_pb::SetIndividualPoseParams& KRAmevaEvent::setindividualposeparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.setIndividualPoseParams)
  return _internal_setindividualposeparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_setindividualposeparams(
    ::sl_pb::SetIndividualPoseParams* setindividualposeparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setindividualposeparams_);
  }
  setindividualposeparams_ = setindividualposeparams;
  if (setindividualposeparams) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.setIndividualPoseParams)
}
inline ::sl_pb::SetIndividualPoseParams* KRAmevaEvent::release_setindividualposeparams() {
  _has_bits_[0] &= ~0x00000200u;
  ::sl_pb::SetIndividualPoseParams* temp = setindividualposeparams_;
  setindividualposeparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::SetIndividualPoseParams* KRAmevaEvent::unsafe_arena_release_setindividualposeparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.setIndividualPoseParams)
  _has_bits_[0] &= ~0x00000200u;
  ::sl_pb::SetIndividualPoseParams* temp = setindividualposeparams_;
  setindividualposeparams_ = nullptr;
  return temp;
}
inline ::sl_pb::SetIndividualPoseParams* KRAmevaEvent::_internal_mutable_setindividualposeparams() {
  _has_bits_[0] |= 0x00000200u;
  if (setindividualposeparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::SetIndividualPoseParams>(GetArena());
    setindividualposeparams_ = p;
  }
  return setindividualposeparams_;
}
inline ::sl_pb::SetIndividualPoseParams* KRAmevaEvent::mutable_setindividualposeparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.setIndividualPoseParams)
  return _internal_mutable_setindividualposeparams();
}
inline void KRAmevaEvent::set_allocated_setindividualposeparams(::sl_pb::SetIndividualPoseParams* setindividualposeparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setindividualposeparams_);
  }
  if (setindividualposeparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setindividualposeparams)->GetArena();
    if (message_arena != submessage_arena) {
      setindividualposeparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setindividualposeparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  setindividualposeparams_ = setindividualposeparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.setIndividualPoseParams)
}

// optional .sl_pb.ApplyForceToParams applyForceToParams = 12;
inline bool KRAmevaEvent::_internal_has_applyforcetoparams() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || applyforcetoparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_applyforcetoparams() const {
  return _internal_has_applyforcetoparams();
}
inline const ::sl_pb::ApplyForceToParams& KRAmevaEvent::_internal_applyforcetoparams() const {
  const ::sl_pb::ApplyForceToParams* p = applyforcetoparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::ApplyForceToParams*>(
      &::sl_pb::_ApplyForceToParams_default_instance_);
}
inline const ::sl_pb::ApplyForceToParams& KRAmevaEvent::applyforcetoparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.applyForceToParams)
  return _internal_applyforcetoparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_applyforcetoparams(
    ::sl_pb::ApplyForceToParams* applyforcetoparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyforcetoparams_);
  }
  applyforcetoparams_ = applyforcetoparams;
  if (applyforcetoparams) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.applyForceToParams)
}
inline ::sl_pb::ApplyForceToParams* KRAmevaEvent::release_applyforcetoparams() {
  _has_bits_[0] &= ~0x00000400u;
  ::sl_pb::ApplyForceToParams* temp = applyforcetoparams_;
  applyforcetoparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::ApplyForceToParams* KRAmevaEvent::unsafe_arena_release_applyforcetoparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.applyForceToParams)
  _has_bits_[0] &= ~0x00000400u;
  ::sl_pb::ApplyForceToParams* temp = applyforcetoparams_;
  applyforcetoparams_ = nullptr;
  return temp;
}
inline ::sl_pb::ApplyForceToParams* KRAmevaEvent::_internal_mutable_applyforcetoparams() {
  _has_bits_[0] |= 0x00000400u;
  if (applyforcetoparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::ApplyForceToParams>(GetArena());
    applyforcetoparams_ = p;
  }
  return applyforcetoparams_;
}
inline ::sl_pb::ApplyForceToParams* KRAmevaEvent::mutable_applyforcetoparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.applyForceToParams)
  return _internal_mutable_applyforcetoparams();
}
inline void KRAmevaEvent::set_allocated_applyforcetoparams(::sl_pb::ApplyForceToParams* applyforcetoparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyforcetoparams_);
  }
  if (applyforcetoparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyforcetoparams)->GetArena();
    if (message_arena != submessage_arena) {
      applyforcetoparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applyforcetoparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  applyforcetoparams_ = applyforcetoparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.applyForceToParams)
}

// optional .sl_pb.HighlightParams highlightParams = 13;
inline bool KRAmevaEvent::_internal_has_highlightparams() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || highlightparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_highlightparams() const {
  return _internal_has_highlightparams();
}
inline const ::sl_pb::HighlightParams& KRAmevaEvent::_internal_highlightparams() const {
  const ::sl_pb::HighlightParams* p = highlightparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::HighlightParams*>(
      &::sl_pb::_HighlightParams_default_instance_);
}
inline const ::sl_pb::HighlightParams& KRAmevaEvent::highlightparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.highlightParams)
  return _internal_highlightparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_highlightparams(
    ::sl_pb::HighlightParams* highlightparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlightparams_);
  }
  highlightparams_ = highlightparams;
  if (highlightparams) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.highlightParams)
}
inline ::sl_pb::HighlightParams* KRAmevaEvent::release_highlightparams() {
  _has_bits_[0] &= ~0x00000800u;
  ::sl_pb::HighlightParams* temp = highlightparams_;
  highlightparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::HighlightParams* KRAmevaEvent::unsafe_arena_release_highlightparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.highlightParams)
  _has_bits_[0] &= ~0x00000800u;
  ::sl_pb::HighlightParams* temp = highlightparams_;
  highlightparams_ = nullptr;
  return temp;
}
inline ::sl_pb::HighlightParams* KRAmevaEvent::_internal_mutable_highlightparams() {
  _has_bits_[0] |= 0x00000800u;
  if (highlightparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::HighlightParams>(GetArena());
    highlightparams_ = p;
  }
  return highlightparams_;
}
inline ::sl_pb::HighlightParams* KRAmevaEvent::mutable_highlightparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.highlightParams)
  return _internal_mutable_highlightparams();
}
inline void KRAmevaEvent::set_allocated_highlightparams(::sl_pb::HighlightParams* highlightparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlightparams_);
  }
  if (highlightparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlightparams)->GetArena();
    if (message_arena != submessage_arena) {
      highlightparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlightparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  highlightparams_ = highlightparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.highlightParams)
}

// optional .sl_pb.RemoveHighlightParams removeHighlightParams = 14;
inline bool KRAmevaEvent::_internal_has_removehighlightparams() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || removehighlightparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_removehighlightparams() const {
  return _internal_has_removehighlightparams();
}
inline const ::sl_pb::RemoveHighlightParams& KRAmevaEvent::_internal_removehighlightparams() const {
  const ::sl_pb::RemoveHighlightParams* p = removehighlightparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::RemoveHighlightParams*>(
      &::sl_pb::_RemoveHighlightParams_default_instance_);
}
inline const ::sl_pb::RemoveHighlightParams& KRAmevaEvent::removehighlightparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.removeHighlightParams)
  return _internal_removehighlightparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_removehighlightparams(
    ::sl_pb::RemoveHighlightParams* removehighlightparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removehighlightparams_);
  }
  removehighlightparams_ = removehighlightparams;
  if (removehighlightparams) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.removeHighlightParams)
}
inline ::sl_pb::RemoveHighlightParams* KRAmevaEvent::release_removehighlightparams() {
  _has_bits_[0] &= ~0x00001000u;
  ::sl_pb::RemoveHighlightParams* temp = removehighlightparams_;
  removehighlightparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::RemoveHighlightParams* KRAmevaEvent::unsafe_arena_release_removehighlightparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.removeHighlightParams)
  _has_bits_[0] &= ~0x00001000u;
  ::sl_pb::RemoveHighlightParams* temp = removehighlightparams_;
  removehighlightparams_ = nullptr;
  return temp;
}
inline ::sl_pb::RemoveHighlightParams* KRAmevaEvent::_internal_mutable_removehighlightparams() {
  _has_bits_[0] |= 0x00001000u;
  if (removehighlightparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::RemoveHighlightParams>(GetArena());
    removehighlightparams_ = p;
  }
  return removehighlightparams_;
}
inline ::sl_pb::RemoveHighlightParams* KRAmevaEvent::mutable_removehighlightparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.removeHighlightParams)
  return _internal_mutable_removehighlightparams();
}
inline void KRAmevaEvent::set_allocated_removehighlightparams(::sl_pb::RemoveHighlightParams* removehighlightparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(removehighlightparams_);
  }
  if (removehighlightparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removehighlightparams)->GetArena();
    if (message_arena != submessage_arena) {
      removehighlightparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removehighlightparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  removehighlightparams_ = removehighlightparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.removeHighlightParams)
}

// -------------------------------------------------------------------

// KRAmevaResponse

// required .sl_pb.KRAmevaResponse.ResponseType type = 1;
inline bool KRAmevaResponse::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KRAmevaResponse::has_type() const {
  return _internal_has_type();
}
inline void KRAmevaResponse::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sl_pb::KRAmevaResponse_ResponseType KRAmevaResponse::_internal_type() const {
  return static_cast< ::sl_pb::KRAmevaResponse_ResponseType >(type_);
}
inline ::sl_pb::KRAmevaResponse_ResponseType KRAmevaResponse::type() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaResponse.type)
  return _internal_type();
}
inline void KRAmevaResponse::_internal_set_type(::sl_pb::KRAmevaResponse_ResponseType value) {
  assert(::sl_pb::KRAmevaResponse_ResponseType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void KRAmevaResponse::set_type(::sl_pb::KRAmevaResponse_ResponseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaResponse.type)
}

// optional string text = 2;
inline bool KRAmevaResponse::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KRAmevaResponse::has_text() const {
  return _internal_has_text();
}
inline void KRAmevaResponse::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KRAmevaResponse::text() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaResponse.text)
  return _internal_text();
}
inline void KRAmevaResponse::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaResponse.text)
}
inline std::string* KRAmevaResponse::mutable_text() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaResponse.text)
  return _internal_mutable_text();
}
inline const std::string& KRAmevaResponse::_internal_text() const {
  return text_.Get();
}
inline void KRAmevaResponse::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KRAmevaResponse::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.KRAmevaResponse.text)
}
inline void KRAmevaResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.KRAmevaResponse.text)
}
inline void KRAmevaResponse::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.KRAmevaResponse.text)
}
inline std::string* KRAmevaResponse::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KRAmevaResponse::release_text() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaResponse.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KRAmevaResponse::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaResponse.text)
}

// optional string fileName = 3;
inline bool KRAmevaResponse::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KRAmevaResponse::has_filename() const {
  return _internal_has_filename();
}
inline void KRAmevaResponse::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KRAmevaResponse::filename() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaResponse.fileName)
  return _internal_filename();
}
inline void KRAmevaResponse::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaResponse.fileName)
}
inline std::string* KRAmevaResponse::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaResponse.fileName)
  return _internal_mutable_filename();
}
inline const std::string& KRAmevaResponse::_internal_filename() const {
  return filename_.Get();
}
inline void KRAmevaResponse::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KRAmevaResponse::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.KRAmevaResponse.fileName)
}
inline void KRAmevaResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.KRAmevaResponse.fileName)
}
inline void KRAmevaResponse::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.KRAmevaResponse.fileName)
}
inline std::string* KRAmevaResponse::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KRAmevaResponse::release_filename() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaResponse.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KRAmevaResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaResponse.fileName)
}

// optional bytes fileData = 4;
inline bool KRAmevaResponse::_internal_has_filedata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KRAmevaResponse::has_filedata() const {
  return _internal_has_filedata();
}
inline void KRAmevaResponse::clear_filedata() {
  filedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KRAmevaResponse::filedata() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaResponse.fileData)
  return _internal_filedata();
}
inline void KRAmevaResponse::set_filedata(const std::string& value) {
  _internal_set_filedata(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaResponse.fileData)
}
inline std::string* KRAmevaResponse::mutable_filedata() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaResponse.fileData)
  return _internal_mutable_filedata();
}
inline const std::string& KRAmevaResponse::_internal_filedata() const {
  return filedata_.Get();
}
inline void KRAmevaResponse::_internal_set_filedata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  filedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KRAmevaResponse::set_filedata(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  filedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.KRAmevaResponse.fileData)
}
inline void KRAmevaResponse::set_filedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  filedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.KRAmevaResponse.fileData)
}
inline void KRAmevaResponse::set_filedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  filedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.KRAmevaResponse.fileData)
}
inline std::string* KRAmevaResponse::_internal_mutable_filedata() {
  _has_bits_[0] |= 0x00000004u;
  return filedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KRAmevaResponse::release_filedata() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaResponse.fileData)
  if (!_internal_has_filedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return filedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KRAmevaResponse::set_allocated_filedata(std::string* filedata) {
  if (filedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  filedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaResponse.fileData)
}

// optional int32 dataLength = 5;
inline bool KRAmevaResponse::_internal_has_datalength() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KRAmevaResponse::has_datalength() const {
  return _internal_has_datalength();
}
inline void KRAmevaResponse::clear_datalength() {
  datalength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KRAmevaResponse::_internal_datalength() const {
  return datalength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KRAmevaResponse::datalength() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaResponse.dataLength)
  return _internal_datalength();
}
inline void KRAmevaResponse::_internal_set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  datalength_ = value;
}
inline void KRAmevaResponse::set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datalength(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaResponse.dataLength)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sl_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sl_pb::KRAmevaEvent_FuncToCall> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sl_pb::KRAmevaEvent_FuncToCall>() {
  return ::sl_pb::KRAmevaEvent_FuncToCall_descriptor();
}
template <> struct is_proto_enum< ::sl_pb::KRAmevaResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sl_pb::KRAmevaResponse_ResponseType>() {
  return ::sl_pb::KRAmevaResponse_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ameva_2eproto
