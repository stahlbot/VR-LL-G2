#pragma warning (disable : 4125)
#pragma once
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto;
namespace sl_pb {
class ApplyForceToParams;
class ApplyForceToParamsDefaultTypeInternal;
extern ApplyForceToParamsDefaultTypeInternal _ApplyForceToParams_default_instance_;
class GetEpisodeDataParams;
class GetEpisodeDataParamsDefaultTypeInternal;
extern GetEpisodeDataParamsDefaultTypeInternal _GetEpisodeDataParams_default_instance_;
class SetIndividualPoseParams;
class SetIndividualPoseParamsDefaultTypeInternal;
extern SetIndividualPoseParamsDefaultTypeInternal _SetIndividualPoseParams_default_instance_;
class StartLoggingParams;
class StartLoggingParamsDefaultTypeInternal;
extern StartLoggingParamsDefaultTypeInternal _StartLoggingParams_default_instance_;
class StartSimulationParams;
class StartSimulationParamsDefaultTypeInternal;
extern StartSimulationParamsDefaultTypeInternal _StartSimulationParams_default_instance_;
class StopSimulationParams;
class StopSimulationParamsDefaultTypeInternal;
extern StopSimulationParamsDefaultTypeInternal _StopSimulationParams_default_instance_;
}  // namespace sl_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sl_pb::ApplyForceToParams* Arena::CreateMaybeMessage<::sl_pb::ApplyForceToParams>(Arena*);
template<> ::sl_pb::GetEpisodeDataParams* Arena::CreateMaybeMessage<::sl_pb::GetEpisodeDataParams>(Arena*);
template<> ::sl_pb::SetIndividualPoseParams* Arena::CreateMaybeMessage<::sl_pb::SetIndividualPoseParams>(Arena*);
template<> ::sl_pb::StartLoggingParams* Arena::CreateMaybeMessage<::sl_pb::StartLoggingParams>(Arena*);
template<> ::sl_pb::StartSimulationParams* Arena::CreateMaybeMessage<::sl_pb::StartSimulationParams>(Arena*);
template<> ::sl_pb::StopSimulationParams* Arena::CreateMaybeMessage<::sl_pb::StopSimulationParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sl_pb {

// ===================================================================

class StartSimulationParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.StartSimulationParams) */ {
 public:
  inline StartSimulationParams() : StartSimulationParams(nullptr) {}
  virtual ~StartSimulationParams();

  StartSimulationParams(const StartSimulationParams& from);
  StartSimulationParams(StartSimulationParams&& from) noexcept
    : StartSimulationParams() {
    *this = ::std::move(from);
  }

  inline StartSimulationParams& operator=(const StartSimulationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSimulationParams& operator=(StartSimulationParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSimulationParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSimulationParams* internal_default_instance() {
    return reinterpret_cast<const StartSimulationParams*>(
               &_StartSimulationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartSimulationParams& a, StartSimulationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSimulationParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSimulationParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSimulationParams* New() const final {
    return CreateMaybeMessage<StartSimulationParams>(nullptr);
  }

  StartSimulationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSimulationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSimulationParams& from);
  void MergeFrom(const StartSimulationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSimulationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.StartSimulationParams";
  }
  protected:
  explicit StartSimulationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  void set_id(int index, const std::string& value);
  void set_id(int index, std::string&& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  std::string* add_id();
  void add_id(const std::string& value);
  void add_id(std::string&& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_id();
  private:
  const std::string& _internal_id(int index) const;
  std::string* _internal_add_id();
  public:

  // required int32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.StartSimulationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> id_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class StopSimulationParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.StopSimulationParams) */ {
 public:
  inline StopSimulationParams() : StopSimulationParams(nullptr) {}
  virtual ~StopSimulationParams();

  StopSimulationParams(const StopSimulationParams& from);
  StopSimulationParams(StopSimulationParams&& from) noexcept
    : StopSimulationParams() {
    *this = ::std::move(from);
  }

  inline StopSimulationParams& operator=(const StopSimulationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSimulationParams& operator=(StopSimulationParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSimulationParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopSimulationParams* internal_default_instance() {
    return reinterpret_cast<const StopSimulationParams*>(
               &_StopSimulationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopSimulationParams& a, StopSimulationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSimulationParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopSimulationParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSimulationParams* New() const final {
    return CreateMaybeMessage<StopSimulationParams>(nullptr);
  }

  StopSimulationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSimulationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSimulationParams& from);
  void MergeFrom(const StopSimulationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSimulationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.StopSimulationParams";
  }
  protected:
  explicit StopSimulationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  void set_id(int index, const std::string& value);
  void set_id(int index, std::string&& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  std::string* add_id();
  void add_id(const std::string& value);
  void add_id(std::string&& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_id();
  private:
  const std::string& _internal_id(int index) const;
  std::string* _internal_add_id();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.StopSimulationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class SetIndividualPoseParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.SetIndividualPoseParams) */ {
 public:
  inline SetIndividualPoseParams() : SetIndividualPoseParams(nullptr) {}
  virtual ~SetIndividualPoseParams();

  SetIndividualPoseParams(const SetIndividualPoseParams& from);
  SetIndividualPoseParams(SetIndividualPoseParams&& from) noexcept
    : SetIndividualPoseParams() {
    *this = ::std::move(from);
  }

  inline SetIndividualPoseParams& operator=(const SetIndividualPoseParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIndividualPoseParams& operator=(SetIndividualPoseParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetIndividualPoseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetIndividualPoseParams* internal_default_instance() {
    return reinterpret_cast<const SetIndividualPoseParams*>(
               &_SetIndividualPoseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetIndividualPoseParams& a, SetIndividualPoseParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIndividualPoseParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIndividualPoseParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetIndividualPoseParams* New() const final {
    return CreateMaybeMessage<SetIndividualPoseParams>(nullptr);
  }

  SetIndividualPoseParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetIndividualPoseParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetIndividualPoseParams& from);
  void MergeFrom(const SetIndividualPoseParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIndividualPoseParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.SetIndividualPoseParams";
  }
  protected:
  explicit SetIndividualPoseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVecXFieldNumber = 2,
    kVecYFieldNumber = 3,
    kVecZFieldNumber = 4,
    kQuatXFieldNumber = 5,
    kQuatYFieldNumber = 6,
    kQuatZFieldNumber = 7,
    kQuatWFieldNumber = 8,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required float vecX = 2;
  bool has_vecx() const;
  private:
  bool _internal_has_vecx() const;
  public:
  void clear_vecx();
  float vecx() const;
  void set_vecx(float value);
  private:
  float _internal_vecx() const;
  void _internal_set_vecx(float value);
  public:

  // required float vecY = 3;
  bool has_vecy() const;
  private:
  bool _internal_has_vecy() const;
  public:
  void clear_vecy();
  float vecy() const;
  void set_vecy(float value);
  private:
  float _internal_vecy() const;
  void _internal_set_vecy(float value);
  public:

  // required float vecZ = 4;
  bool has_vecz() const;
  private:
  bool _internal_has_vecz() const;
  public:
  void clear_vecz();
  float vecz() const;
  void set_vecz(float value);
  private:
  float _internal_vecz() const;
  void _internal_set_vecz(float value);
  public:

  // required float quatX = 5;
  bool has_quatx() const;
  private:
  bool _internal_has_quatx() const;
  public:
  void clear_quatx();
  float quatx() const;
  void set_quatx(float value);
  private:
  float _internal_quatx() const;
  void _internal_set_quatx(float value);
  public:

  // required float quatY = 6;
  bool has_quaty() const;
  private:
  bool _internal_has_quaty() const;
  public:
  void clear_quaty();
  float quaty() const;
  void set_quaty(float value);
  private:
  float _internal_quaty() const;
  void _internal_set_quaty(float value);
  public:

  // required float quatZ = 7;
  bool has_quatz() const;
  private:
  bool _internal_has_quatz() const;
  public:
  void clear_quatz();
  float quatz() const;
  void set_quatz(float value);
  private:
  float _internal_quatz() const;
  void _internal_set_quatz(float value);
  public:

  // required float quatW = 8;
  bool has_quatw() const;
  private:
  bool _internal_has_quatw() const;
  public:
  void clear_quatw();
  float quatw() const;
  void set_quatw(float value);
  private:
  float _internal_quatw() const;
  void _internal_set_quatw(float value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.SetIndividualPoseParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  float vecx_;
  float vecy_;
  float vecz_;
  float quatx_;
  float quaty_;
  float quatz_;
  float quatw_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class StartLoggingParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.StartLoggingParams) */ {
 public:
  inline StartLoggingParams() : StartLoggingParams(nullptr) {}
  virtual ~StartLoggingParams();

  StartLoggingParams(const StartLoggingParams& from);
  StartLoggingParams(StartLoggingParams&& from) noexcept
    : StartLoggingParams() {
    *this = ::std::move(from);
  }

  inline StartLoggingParams& operator=(const StartLoggingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLoggingParams& operator=(StartLoggingParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartLoggingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartLoggingParams* internal_default_instance() {
    return reinterpret_cast<const StartLoggingParams*>(
               &_StartLoggingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartLoggingParams& a, StartLoggingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLoggingParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLoggingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartLoggingParams* New() const final {
    return CreateMaybeMessage<StartLoggingParams>(nullptr);
  }

  StartLoggingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartLoggingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartLoggingParams& from);
  void MergeFrom(const StartLoggingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartLoggingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.StartLoggingParams";
  }
  protected:
  explicit StartLoggingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kEpisodeIdFieldNumber = 2,
  };
  // required string taskId = 1;
  bool has_taskid() const;
  private:
  bool _internal_has_taskid() const;
  public:
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // required string episodeId = 2;
  bool has_episodeid() const;
  private:
  bool _internal_has_episodeid() const;
  public:
  void clear_episodeid();
  const std::string& episodeid() const;
  void set_episodeid(const std::string& value);
  void set_episodeid(std::string&& value);
  void set_episodeid(const char* value);
  void set_episodeid(const char* value, size_t size);
  std::string* mutable_episodeid();
  std::string* release_episodeid();
  void set_allocated_episodeid(std::string* episodeid);
  private:
  const std::string& _internal_episodeid() const;
  void _internal_set_episodeid(const std::string& value);
  std::string* _internal_mutable_episodeid();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.StartLoggingParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr episodeid_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class GetEpisodeDataParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.GetEpisodeDataParams) */ {
 public:
  inline GetEpisodeDataParams() : GetEpisodeDataParams(nullptr) {}
  virtual ~GetEpisodeDataParams();

  GetEpisodeDataParams(const GetEpisodeDataParams& from);
  GetEpisodeDataParams(GetEpisodeDataParams&& from) noexcept
    : GetEpisodeDataParams() {
    *this = ::std::move(from);
  }

  inline GetEpisodeDataParams& operator=(const GetEpisodeDataParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEpisodeDataParams& operator=(GetEpisodeDataParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEpisodeDataParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEpisodeDataParams* internal_default_instance() {
    return reinterpret_cast<const GetEpisodeDataParams*>(
               &_GetEpisodeDataParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetEpisodeDataParams& a, GetEpisodeDataParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEpisodeDataParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEpisodeDataParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEpisodeDataParams* New() const final {
    return CreateMaybeMessage<GetEpisodeDataParams>(nullptr);
  }

  GetEpisodeDataParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEpisodeDataParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEpisodeDataParams& from);
  void MergeFrom(const GetEpisodeDataParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEpisodeDataParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.GetEpisodeDataParams";
  }
  protected:
  explicit GetEpisodeDataParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kEpisodeIdFieldNumber = 2,
  };
  // required string taskId = 1;
  bool has_taskid() const;
  private:
  bool _internal_has_taskid() const;
  public:
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // required string episodeId = 2;
  bool has_episodeid() const;
  private:
  bool _internal_has_episodeid() const;
  public:
  void clear_episodeid();
  const std::string& episodeid() const;
  void set_episodeid(const std::string& value);
  void set_episodeid(std::string&& value);
  void set_episodeid(const char* value);
  void set_episodeid(const char* value, size_t size);
  std::string* mutable_episodeid();
  std::string* release_episodeid();
  void set_allocated_episodeid(std::string* episodeid);
  private:
  const std::string& _internal_episodeid() const;
  void _internal_set_episodeid(const std::string& value);
  std::string* _internal_mutable_episodeid();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.GetEpisodeDataParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr episodeid_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ApplyForceToParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.ApplyForceToParams) */ {
 public:
  inline ApplyForceToParams() : ApplyForceToParams(nullptr) {}
  virtual ~ApplyForceToParams();

  ApplyForceToParams(const ApplyForceToParams& from);
  ApplyForceToParams(ApplyForceToParams&& from) noexcept
    : ApplyForceToParams() {
    *this = ::std::move(from);
  }

  inline ApplyForceToParams& operator=(const ApplyForceToParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyForceToParams& operator=(ApplyForceToParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyForceToParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyForceToParams* internal_default_instance() {
    return reinterpret_cast<const ApplyForceToParams*>(
               &_ApplyForceToParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApplyForceToParams& a, ApplyForceToParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyForceToParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyForceToParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyForceToParams* New() const final {
    return CreateMaybeMessage<ApplyForceToParams>(nullptr);
  }

  ApplyForceToParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyForceToParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyForceToParams& from);
  void MergeFrom(const ApplyForceToParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyForceToParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.ApplyForceToParams";
  }
  protected:
  explicit ApplyForceToParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kForceXFieldNumber = 2,
    kForceYFieldNumber = 3,
    kForceZFieldNumber = 4,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required float forceX = 2;
  bool has_forcex() const;
  private:
  bool _internal_has_forcex() const;
  public:
  void clear_forcex();
  float forcex() const;
  void set_forcex(float value);
  private:
  float _internal_forcex() const;
  void _internal_set_forcex(float value);
  public:

  // required float forceY = 3;
  bool has_forcey() const;
  private:
  bool _internal_has_forcey() const;
  public:
  void clear_forcey();
  float forcey() const;
  void set_forcey(float value);
  private:
  float _internal_forcey() const;
  void _internal_set_forcey(float value);
  public:

  // required float forceZ = 4;
  bool has_forcez() const;
  private:
  bool _internal_has_forcez() const;
  public:
  void clear_forcez();
  float forcez() const;
  void set_forcez(float value);
  private:
  float _internal_forcez() const;
  void _internal_set_forcez(float value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.ApplyForceToParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  float forcex_;
  float forcey_;
  float forcez_;
  friend struct ::TableStruct_control_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartSimulationParams

// repeated string id = 1;
inline int StartSimulationParams::_internal_id_size() const {
  return id_.size();
}
inline int StartSimulationParams::id_size() const {
  return _internal_id_size();
}
inline void StartSimulationParams::clear_id() {
  id_.Clear();
}
inline std::string* StartSimulationParams::add_id() {
  // @@protoc_insertion_point(field_add_mutable:sl_pb.StartSimulationParams.id)
  return _internal_add_id();
}
inline const std::string& StartSimulationParams::_internal_id(int index) const {
  return id_.Get(index);
}
inline const std::string& StartSimulationParams::id(int index) const {
  // @@protoc_insertion_point(field_get:sl_pb.StartSimulationParams.id)
  return _internal_id(index);
}
inline std::string* StartSimulationParams::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:sl_pb.StartSimulationParams.id)
  return id_.Mutable(index);
}
inline void StartSimulationParams::set_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sl_pb.StartSimulationParams.id)
  id_.Mutable(index)->assign(value);
}
inline void StartSimulationParams::set_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sl_pb.StartSimulationParams.id)
  id_.Mutable(index)->assign(std::move(value));
}
inline void StartSimulationParams::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sl_pb.StartSimulationParams.id)
}
inline void StartSimulationParams::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sl_pb.StartSimulationParams.id)
}
inline std::string* StartSimulationParams::_internal_add_id() {
  return id_.Add();
}
inline void StartSimulationParams::add_id(const std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sl_pb.StartSimulationParams.id)
}
inline void StartSimulationParams::add_id(std::string&& value) {
  id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sl_pb.StartSimulationParams.id)
}
inline void StartSimulationParams::add_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sl_pb.StartSimulationParams.id)
}
inline void StartSimulationParams::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sl_pb.StartSimulationParams.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartSimulationParams::id() const {
  // @@protoc_insertion_point(field_list:sl_pb.StartSimulationParams.id)
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartSimulationParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:sl_pb.StartSimulationParams.id)
  return &id_;
}

// required int32 duration = 2;
inline bool StartSimulationParams::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartSimulationParams::has_duration() const {
  return _internal_has_duration();
}
inline void StartSimulationParams::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartSimulationParams::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartSimulationParams::duration() const {
  // @@protoc_insertion_point(field_get:sl_pb.StartSimulationParams.duration)
  return _internal_duration();
}
inline void StartSimulationParams::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ = value;
}
inline void StartSimulationParams::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:sl_pb.StartSimulationParams.duration)
}

// -------------------------------------------------------------------

// StopSimulationParams

// repeated string id = 1;
inline int StopSimulationParams::_internal_id_size() const {
  return id_.size();
}
inline int StopSimulationParams::id_size() const {
  return _internal_id_size();
}
inline void StopSimulationParams::clear_id() {
  id_.Clear();
}
inline std::string* StopSimulationParams::add_id() {
  // @@protoc_insertion_point(field_add_mutable:sl_pb.StopSimulationParams.id)
  return _internal_add_id();
}
inline const std::string& StopSimulationParams::_internal_id(int index) const {
  return id_.Get(index);
}
inline const std::string& StopSimulationParams::id(int index) const {
  // @@protoc_insertion_point(field_get:sl_pb.StopSimulationParams.id)
  return _internal_id(index);
}
inline std::string* StopSimulationParams::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:sl_pb.StopSimulationParams.id)
  return id_.Mutable(index);
}
inline void StopSimulationParams::set_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sl_pb.StopSimulationParams.id)
  id_.Mutable(index)->assign(value);
}
inline void StopSimulationParams::set_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sl_pb.StopSimulationParams.id)
  id_.Mutable(index)->assign(std::move(value));
}
inline void StopSimulationParams::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sl_pb.StopSimulationParams.id)
}
inline void StopSimulationParams::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sl_pb.StopSimulationParams.id)
}
inline std::string* StopSimulationParams::_internal_add_id() {
  return id_.Add();
}
inline void StopSimulationParams::add_id(const std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sl_pb.StopSimulationParams.id)
}
inline void StopSimulationParams::add_id(std::string&& value) {
  id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sl_pb.StopSimulationParams.id)
}
inline void StopSimulationParams::add_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sl_pb.StopSimulationParams.id)
}
inline void StopSimulationParams::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sl_pb.StopSimulationParams.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopSimulationParams::id() const {
  // @@protoc_insertion_point(field_list:sl_pb.StopSimulationParams.id)
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopSimulationParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:sl_pb.StopSimulationParams.id)
  return &id_;
}

// -------------------------------------------------------------------

// SetIndividualPoseParams

// required string id = 1;
inline bool SetIndividualPoseParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_id() const {
  return _internal_has_id();
}
inline void SetIndividualPoseParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetIndividualPoseParams::id() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.id)
  return _internal_id();
}
inline void SetIndividualPoseParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.id)
}
inline std::string* SetIndividualPoseParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sl_pb.SetIndividualPoseParams.id)
  return _internal_mutable_id();
}
inline const std::string& SetIndividualPoseParams::_internal_id() const {
  return id_.Get();
}
inline void SetIndividualPoseParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetIndividualPoseParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.SetIndividualPoseParams.id)
}
inline void SetIndividualPoseParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.SetIndividualPoseParams.id)
}
inline void SetIndividualPoseParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.SetIndividualPoseParams.id)
}
inline std::string* SetIndividualPoseParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetIndividualPoseParams::release_id() {
  // @@protoc_insertion_point(field_release:sl_pb.SetIndividualPoseParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetIndividualPoseParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.SetIndividualPoseParams.id)
}

// required float vecX = 2;
inline bool SetIndividualPoseParams::_internal_has_vecx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_vecx() const {
  return _internal_has_vecx();
}
inline void SetIndividualPoseParams::clear_vecx() {
  vecx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SetIndividualPoseParams::_internal_vecx() const {
  return vecx_;
}
inline float SetIndividualPoseParams::vecx() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.vecX)
  return _internal_vecx();
}
inline void SetIndividualPoseParams::_internal_set_vecx(float value) {
  _has_bits_[0] |= 0x00000002u;
  vecx_ = value;
}
inline void SetIndividualPoseParams::set_vecx(float value) {
  _internal_set_vecx(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.vecX)
}

// required float vecY = 3;
inline bool SetIndividualPoseParams::_internal_has_vecy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_vecy() const {
  return _internal_has_vecy();
}
inline void SetIndividualPoseParams::clear_vecy() {
  vecy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SetIndividualPoseParams::_internal_vecy() const {
  return vecy_;
}
inline float SetIndividualPoseParams::vecy() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.vecY)
  return _internal_vecy();
}
inline void SetIndividualPoseParams::_internal_set_vecy(float value) {
  _has_bits_[0] |= 0x00000004u;
  vecy_ = value;
}
inline void SetIndividualPoseParams::set_vecy(float value) {
  _internal_set_vecy(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.vecY)
}

// required float vecZ = 4;
inline bool SetIndividualPoseParams::_internal_has_vecz() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_vecz() const {
  return _internal_has_vecz();
}
inline void SetIndividualPoseParams::clear_vecz() {
  vecz_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SetIndividualPoseParams::_internal_vecz() const {
  return vecz_;
}
inline float SetIndividualPoseParams::vecz() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.vecZ)
  return _internal_vecz();
}
inline void SetIndividualPoseParams::_internal_set_vecz(float value) {
  _has_bits_[0] |= 0x00000008u;
  vecz_ = value;
}
inline void SetIndividualPoseParams::set_vecz(float value) {
  _internal_set_vecz(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.vecZ)
}

// required float quatX = 5;
inline bool SetIndividualPoseParams::_internal_has_quatx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_quatx() const {
  return _internal_has_quatx();
}
inline void SetIndividualPoseParams::clear_quatx() {
  quatx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SetIndividualPoseParams::_internal_quatx() const {
  return quatx_;
}
inline float SetIndividualPoseParams::quatx() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.quatX)
  return _internal_quatx();
}
inline void SetIndividualPoseParams::_internal_set_quatx(float value) {
  _has_bits_[0] |= 0x00000010u;
  quatx_ = value;
}
inline void SetIndividualPoseParams::set_quatx(float value) {
  _internal_set_quatx(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.quatX)
}

// required float quatY = 6;
inline bool SetIndividualPoseParams::_internal_has_quaty() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_quaty() const {
  return _internal_has_quaty();
}
inline void SetIndividualPoseParams::clear_quaty() {
  quaty_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SetIndividualPoseParams::_internal_quaty() const {
  return quaty_;
}
inline float SetIndividualPoseParams::quaty() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.quatY)
  return _internal_quaty();
}
inline void SetIndividualPoseParams::_internal_set_quaty(float value) {
  _has_bits_[0] |= 0x00000020u;
  quaty_ = value;
}
inline void SetIndividualPoseParams::set_quaty(float value) {
  _internal_set_quaty(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.quatY)
}

// required float quatZ = 7;
inline bool SetIndividualPoseParams::_internal_has_quatz() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_quatz() const {
  return _internal_has_quatz();
}
inline void SetIndividualPoseParams::clear_quatz() {
  quatz_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SetIndividualPoseParams::_internal_quatz() const {
  return quatz_;
}
inline float SetIndividualPoseParams::quatz() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.quatZ)
  return _internal_quatz();
}
inline void SetIndividualPoseParams::_internal_set_quatz(float value) {
  _has_bits_[0] |= 0x00000040u;
  quatz_ = value;
}
inline void SetIndividualPoseParams::set_quatz(float value) {
  _internal_set_quatz(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.quatZ)
}

// required float quatW = 8;
inline bool SetIndividualPoseParams::_internal_has_quatw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SetIndividualPoseParams::has_quatw() const {
  return _internal_has_quatw();
}
inline void SetIndividualPoseParams::clear_quatw() {
  quatw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SetIndividualPoseParams::_internal_quatw() const {
  return quatw_;
}
inline float SetIndividualPoseParams::quatw() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetIndividualPoseParams.quatW)
  return _internal_quatw();
}
inline void SetIndividualPoseParams::_internal_set_quatw(float value) {
  _has_bits_[0] |= 0x00000080u;
  quatw_ = value;
}
inline void SetIndividualPoseParams::set_quatw(float value) {
  _internal_set_quatw(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetIndividualPoseParams.quatW)
}

// -------------------------------------------------------------------

// StartLoggingParams

// required string taskId = 1;
inline bool StartLoggingParams::_internal_has_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartLoggingParams::has_taskid() const {
  return _internal_has_taskid();
}
inline void StartLoggingParams::clear_taskid() {
  taskid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartLoggingParams::taskid() const {
  // @@protoc_insertion_point(field_get:sl_pb.StartLoggingParams.taskId)
  return _internal_taskid();
}
inline void StartLoggingParams::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:sl_pb.StartLoggingParams.taskId)
}
inline std::string* StartLoggingParams::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:sl_pb.StartLoggingParams.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& StartLoggingParams::_internal_taskid() const {
  return taskid_.Get();
}
inline void StartLoggingParams::_internal_set_taskid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartLoggingParams::set_taskid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.StartLoggingParams.taskId)
}
inline void StartLoggingParams::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.StartLoggingParams.taskId)
}
inline void StartLoggingParams::set_taskid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.StartLoggingParams.taskId)
}
inline std::string* StartLoggingParams::_internal_mutable_taskid() {
  _has_bits_[0] |= 0x00000001u;
  return taskid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartLoggingParams::release_taskid() {
  // @@protoc_insertion_point(field_release:sl_pb.StartLoggingParams.taskId)
  if (!_internal_has_taskid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return taskid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartLoggingParams::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.StartLoggingParams.taskId)
}

// required string episodeId = 2;
inline bool StartLoggingParams::_internal_has_episodeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StartLoggingParams::has_episodeid() const {
  return _internal_has_episodeid();
}
inline void StartLoggingParams::clear_episodeid() {
  episodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartLoggingParams::episodeid() const {
  // @@protoc_insertion_point(field_get:sl_pb.StartLoggingParams.episodeId)
  return _internal_episodeid();
}
inline void StartLoggingParams::set_episodeid(const std::string& value) {
  _internal_set_episodeid(value);
  // @@protoc_insertion_point(field_set:sl_pb.StartLoggingParams.episodeId)
}
inline std::string* StartLoggingParams::mutable_episodeid() {
  // @@protoc_insertion_point(field_mutable:sl_pb.StartLoggingParams.episodeId)
  return _internal_mutable_episodeid();
}
inline const std::string& StartLoggingParams::_internal_episodeid() const {
  return episodeid_.Get();
}
inline void StartLoggingParams::_internal_set_episodeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartLoggingParams::set_episodeid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.StartLoggingParams.episodeId)
}
inline void StartLoggingParams::set_episodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.StartLoggingParams.episodeId)
}
inline void StartLoggingParams::set_episodeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.StartLoggingParams.episodeId)
}
inline std::string* StartLoggingParams::_internal_mutable_episodeid() {
  _has_bits_[0] |= 0x00000002u;
  return episodeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartLoggingParams::release_episodeid() {
  // @@protoc_insertion_point(field_release:sl_pb.StartLoggingParams.episodeId)
  if (!_internal_has_episodeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return episodeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartLoggingParams::set_allocated_episodeid(std::string* episodeid) {
  if (episodeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  episodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), episodeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.StartLoggingParams.episodeId)
}

// -------------------------------------------------------------------

// GetEpisodeDataParams

// required string taskId = 1;
inline bool GetEpisodeDataParams::_internal_has_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetEpisodeDataParams::has_taskid() const {
  return _internal_has_taskid();
}
inline void GetEpisodeDataParams::clear_taskid() {
  taskid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetEpisodeDataParams::taskid() const {
  // @@protoc_insertion_point(field_get:sl_pb.GetEpisodeDataParams.taskId)
  return _internal_taskid();
}
inline void GetEpisodeDataParams::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:sl_pb.GetEpisodeDataParams.taskId)
}
inline std::string* GetEpisodeDataParams::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:sl_pb.GetEpisodeDataParams.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& GetEpisodeDataParams::_internal_taskid() const {
  return taskid_.Get();
}
inline void GetEpisodeDataParams::_internal_set_taskid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEpisodeDataParams::set_taskid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.GetEpisodeDataParams.taskId)
}
inline void GetEpisodeDataParams::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.GetEpisodeDataParams.taskId)
}
inline void GetEpisodeDataParams::set_taskid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.GetEpisodeDataParams.taskId)
}
inline std::string* GetEpisodeDataParams::_internal_mutable_taskid() {
  _has_bits_[0] |= 0x00000001u;
  return taskid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEpisodeDataParams::release_taskid() {
  // @@protoc_insertion_point(field_release:sl_pb.GetEpisodeDataParams.taskId)
  if (!_internal_has_taskid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return taskid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEpisodeDataParams::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.GetEpisodeDataParams.taskId)
}

// required string episodeId = 2;
inline bool GetEpisodeDataParams::_internal_has_episodeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetEpisodeDataParams::has_episodeid() const {
  return _internal_has_episodeid();
}
inline void GetEpisodeDataParams::clear_episodeid() {
  episodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetEpisodeDataParams::episodeid() const {
  // @@protoc_insertion_point(field_get:sl_pb.GetEpisodeDataParams.episodeId)
  return _internal_episodeid();
}
inline void GetEpisodeDataParams::set_episodeid(const std::string& value) {
  _internal_set_episodeid(value);
  // @@protoc_insertion_point(field_set:sl_pb.GetEpisodeDataParams.episodeId)
}
inline std::string* GetEpisodeDataParams::mutable_episodeid() {
  // @@protoc_insertion_point(field_mutable:sl_pb.GetEpisodeDataParams.episodeId)
  return _internal_mutable_episodeid();
}
inline const std::string& GetEpisodeDataParams::_internal_episodeid() const {
  return episodeid_.Get();
}
inline void GetEpisodeDataParams::_internal_set_episodeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEpisodeDataParams::set_episodeid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.GetEpisodeDataParams.episodeId)
}
inline void GetEpisodeDataParams::set_episodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.GetEpisodeDataParams.episodeId)
}
inline void GetEpisodeDataParams::set_episodeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  episodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.GetEpisodeDataParams.episodeId)
}
inline std::string* GetEpisodeDataParams::_internal_mutable_episodeid() {
  _has_bits_[0] |= 0x00000002u;
  return episodeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEpisodeDataParams::release_episodeid() {
  // @@protoc_insertion_point(field_release:sl_pb.GetEpisodeDataParams.episodeId)
  if (!_internal_has_episodeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return episodeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEpisodeDataParams::set_allocated_episodeid(std::string* episodeid) {
  if (episodeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  episodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), episodeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.GetEpisodeDataParams.episodeId)
}

// -------------------------------------------------------------------

// ApplyForceToParams

// required string id = 1;
inline bool ApplyForceToParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplyForceToParams::has_id() const {
  return _internal_has_id();
}
inline void ApplyForceToParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplyForceToParams::id() const {
  // @@protoc_insertion_point(field_get:sl_pb.ApplyForceToParams.id)
  return _internal_id();
}
inline void ApplyForceToParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sl_pb.ApplyForceToParams.id)
}
inline std::string* ApplyForceToParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sl_pb.ApplyForceToParams.id)
  return _internal_mutable_id();
}
inline const std::string& ApplyForceToParams::_internal_id() const {
  return id_.Get();
}
inline void ApplyForceToParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplyForceToParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.ApplyForceToParams.id)
}
inline void ApplyForceToParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.ApplyForceToParams.id)
}
inline void ApplyForceToParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.ApplyForceToParams.id)
}
inline std::string* ApplyForceToParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplyForceToParams::release_id() {
  // @@protoc_insertion_point(field_release:sl_pb.ApplyForceToParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyForceToParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.ApplyForceToParams.id)
}

// required float forceX = 2;
inline bool ApplyForceToParams::_internal_has_forcex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ApplyForceToParams::has_forcex() const {
  return _internal_has_forcex();
}
inline void ApplyForceToParams::clear_forcex() {
  forcex_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ApplyForceToParams::_internal_forcex() const {
  return forcex_;
}
inline float ApplyForceToParams::forcex() const {
  // @@protoc_insertion_point(field_get:sl_pb.ApplyForceToParams.forceX)
  return _internal_forcex();
}
inline void ApplyForceToParams::_internal_set_forcex(float value) {
  _has_bits_[0] |= 0x00000002u;
  forcex_ = value;
}
inline void ApplyForceToParams::set_forcex(float value) {
  _internal_set_forcex(value);
  // @@protoc_insertion_point(field_set:sl_pb.ApplyForceToParams.forceX)
}

// required float forceY = 3;
inline bool ApplyForceToParams::_internal_has_forcey() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ApplyForceToParams::has_forcey() const {
  return _internal_has_forcey();
}
inline void ApplyForceToParams::clear_forcey() {
  forcey_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ApplyForceToParams::_internal_forcey() const {
  return forcey_;
}
inline float ApplyForceToParams::forcey() const {
  // @@protoc_insertion_point(field_get:sl_pb.ApplyForceToParams.forceY)
  return _internal_forcey();
}
inline void ApplyForceToParams::_internal_set_forcey(float value) {
  _has_bits_[0] |= 0x00000004u;
  forcey_ = value;
}
inline void ApplyForceToParams::set_forcey(float value) {
  _internal_set_forcey(value);
  // @@protoc_insertion_point(field_set:sl_pb.ApplyForceToParams.forceY)
}

// required float forceZ = 4;
inline bool ApplyForceToParams::_internal_has_forcez() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ApplyForceToParams::has_forcez() const {
  return _internal_has_forcez();
}
inline void ApplyForceToParams::clear_forcez() {
  forcez_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ApplyForceToParams::_internal_forcez() const {
  return forcez_;
}
inline float ApplyForceToParams::forcez() const {
  // @@protoc_insertion_point(field_get:sl_pb.ApplyForceToParams.forceZ)
  return _internal_forcez();
}
inline void ApplyForceToParams::_internal_set_forcez(float value) {
  _has_bits_[0] |= 0x00000008u;
  forcez_ = value;
}
inline void ApplyForceToParams::set_forcez(float value) {
  _internal_set_forcez(value);
  // @@protoc_insertion_point(field_set:sl_pb.ApplyForceToParams.forceZ)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sl_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_2eproto
