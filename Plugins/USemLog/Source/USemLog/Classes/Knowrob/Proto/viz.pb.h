#pragma warning (disable : 4125)
#pragma once
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: viz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_viz_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_viz_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_viz_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_viz_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_viz_2eproto;
namespace sl_pb {
class DrawMarkerAtParams;
class DrawMarkerAtParamsDefaultTypeInternal;
extern DrawMarkerAtParamsDefaultTypeInternal _DrawMarkerAtParams_default_instance_;
class DrawMarkerTrajParams;
class DrawMarkerTrajParamsDefaultTypeInternal;
extern DrawMarkerTrajParamsDefaultTypeInternal _DrawMarkerTrajParams_default_instance_;
class HighlightParams;
class HighlightParamsDefaultTypeInternal;
extern HighlightParamsDefaultTypeInternal _HighlightParams_default_instance_;
class LoadLevelParams;
class LoadLevelParamsDefaultTypeInternal;
extern LoadLevelParamsDefaultTypeInternal _LoadLevelParams_default_instance_;
class RemoveHighlightParams;
class RemoveHighlightParamsDefaultTypeInternal;
extern RemoveHighlightParamsDefaultTypeInternal _RemoveHighlightParams_default_instance_;
class SetEpisodeParams;
class SetEpisodeParamsDefaultTypeInternal;
extern SetEpisodeParamsDefaultTypeInternal _SetEpisodeParams_default_instance_;
class SetTaskParams;
class SetTaskParamsDefaultTypeInternal;
extern SetTaskParamsDefaultTypeInternal _SetTaskParams_default_instance_;
}  // namespace sl_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sl_pb::DrawMarkerAtParams* Arena::CreateMaybeMessage<::sl_pb::DrawMarkerAtParams>(Arena*);
template<> ::sl_pb::DrawMarkerTrajParams* Arena::CreateMaybeMessage<::sl_pb::DrawMarkerTrajParams>(Arena*);
template<> ::sl_pb::HighlightParams* Arena::CreateMaybeMessage<::sl_pb::HighlightParams>(Arena*);
template<> ::sl_pb::LoadLevelParams* Arena::CreateMaybeMessage<::sl_pb::LoadLevelParams>(Arena*);
template<> ::sl_pb::RemoveHighlightParams* Arena::CreateMaybeMessage<::sl_pb::RemoveHighlightParams>(Arena*);
template<> ::sl_pb::SetEpisodeParams* Arena::CreateMaybeMessage<::sl_pb::SetEpisodeParams>(Arena*);
template<> ::sl_pb::SetTaskParams* Arena::CreateMaybeMessage<::sl_pb::SetTaskParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sl_pb {

enum MarkerType : int {
  Box = 1,
  Sphere = 2,
  Cylinder = 3,
  Arrow = 4,
  Axis = 5
};
bool MarkerType_IsValid(int value);
constexpr MarkerType MarkerType_MIN = Box;
constexpr MarkerType MarkerType_MAX = Axis;
constexpr int MarkerType_ARRAYSIZE = MarkerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkerType_descriptor();
template<typename T>
inline const std::string& MarkerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarkerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarkerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarkerType_descriptor(), enum_t_value);
}
inline bool MarkerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarkerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarkerType>(
    MarkerType_descriptor(), name, value);
}
// ===================================================================

class SetTaskParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.SetTaskParams) */ {
 public:
  inline SetTaskParams() : SetTaskParams(nullptr) {}
  virtual ~SetTaskParams();

  SetTaskParams(const SetTaskParams& from);
  SetTaskParams(SetTaskParams&& from) noexcept
    : SetTaskParams() {
    *this = ::std::move(from);
  }

  inline SetTaskParams& operator=(const SetTaskParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTaskParams& operator=(SetTaskParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTaskParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTaskParams* internal_default_instance() {
    return reinterpret_cast<const SetTaskParams*>(
               &_SetTaskParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetTaskParams& a, SetTaskParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTaskParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTaskParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTaskParams* New() const final {
    return CreateMaybeMessage<SetTaskParams>(nullptr);
  }

  SetTaskParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTaskParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTaskParams& from);
  void MergeFrom(const SetTaskParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTaskParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.SetTaskParams";
  }
  protected:
  explicit SetTaskParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
  };
  // required string task = 1;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  void set_task(const std::string& value);
  void set_task(std::string&& value);
  void set_task(const char* value);
  void set_task(const char* value, size_t size);
  std::string* mutable_task();
  std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.SetTaskParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
  friend struct ::TableStruct_viz_2eproto;
};
// -------------------------------------------------------------------

class SetEpisodeParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.SetEpisodeParams) */ {
 public:
  inline SetEpisodeParams() : SetEpisodeParams(nullptr) {}
  virtual ~SetEpisodeParams();

  SetEpisodeParams(const SetEpisodeParams& from);
  SetEpisodeParams(SetEpisodeParams&& from) noexcept
    : SetEpisodeParams() {
    *this = ::std::move(from);
  }

  inline SetEpisodeParams& operator=(const SetEpisodeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEpisodeParams& operator=(SetEpisodeParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEpisodeParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEpisodeParams* internal_default_instance() {
    return reinterpret_cast<const SetEpisodeParams*>(
               &_SetEpisodeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetEpisodeParams& a, SetEpisodeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEpisodeParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEpisodeParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetEpisodeParams* New() const final {
    return CreateMaybeMessage<SetEpisodeParams>(nullptr);
  }

  SetEpisodeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEpisodeParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEpisodeParams& from);
  void MergeFrom(const SetEpisodeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEpisodeParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.SetEpisodeParams";
  }
  protected:
  explicit SetEpisodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpisodeFieldNumber = 2,
  };
  // required string episode = 2;
  bool has_episode() const;
  private:
  bool _internal_has_episode() const;
  public:
  void clear_episode();
  const std::string& episode() const;
  void set_episode(const std::string& value);
  void set_episode(std::string&& value);
  void set_episode(const char* value);
  void set_episode(const char* value, size_t size);
  std::string* mutable_episode();
  std::string* release_episode();
  void set_allocated_episode(std::string* episode);
  private:
  const std::string& _internal_episode() const;
  void _internal_set_episode(const std::string& value);
  std::string* _internal_mutable_episode();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.SetEpisodeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr episode_;
  friend struct ::TableStruct_viz_2eproto;
};
// -------------------------------------------------------------------

class DrawMarkerAtParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.DrawMarkerAtParams) */ {
 public:
  inline DrawMarkerAtParams() : DrawMarkerAtParams(nullptr) {}
  virtual ~DrawMarkerAtParams();

  DrawMarkerAtParams(const DrawMarkerAtParams& from);
  DrawMarkerAtParams(DrawMarkerAtParams&& from) noexcept
    : DrawMarkerAtParams() {
    *this = ::std::move(from);
  }

  inline DrawMarkerAtParams& operator=(const DrawMarkerAtParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawMarkerAtParams& operator=(DrawMarkerAtParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawMarkerAtParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawMarkerAtParams* internal_default_instance() {
    return reinterpret_cast<const DrawMarkerAtParams*>(
               &_DrawMarkerAtParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DrawMarkerAtParams& a, DrawMarkerAtParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawMarkerAtParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawMarkerAtParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawMarkerAtParams* New() const final {
    return CreateMaybeMessage<DrawMarkerAtParams>(nullptr);
  }

  DrawMarkerAtParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawMarkerAtParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawMarkerAtParams& from);
  void MergeFrom(const DrawMarkerAtParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawMarkerAtParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.DrawMarkerAtParams";
  }
  protected:
  explicit DrawMarkerAtParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kColorFieldNumber = 5,
    kMaterialFieldNumber = 6,
    kTimestampFieldNumber = 2,
    kScaleFieldNumber = 4,
    kMarkerFieldNumber = 3,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required string material = 6;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // required float timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // required float scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // required .sl_pb.MarkerType marker = 3;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  ::sl_pb::MarkerType marker() const;
  void set_marker(::sl_pb::MarkerType value);
  private:
  ::sl_pb::MarkerType _internal_marker() const;
  void _internal_set_marker(::sl_pb::MarkerType value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.DrawMarkerAtParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  float timestamp_;
  float scale_;
  int marker_;
  friend struct ::TableStruct_viz_2eproto;
};
// -------------------------------------------------------------------

class DrawMarkerTrajParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.DrawMarkerTrajParams) */ {
 public:
  inline DrawMarkerTrajParams() : DrawMarkerTrajParams(nullptr) {}
  virtual ~DrawMarkerTrajParams();

  DrawMarkerTrajParams(const DrawMarkerTrajParams& from);
  DrawMarkerTrajParams(DrawMarkerTrajParams&& from) noexcept
    : DrawMarkerTrajParams() {
    *this = ::std::move(from);
  }

  inline DrawMarkerTrajParams& operator=(const DrawMarkerTrajParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawMarkerTrajParams& operator=(DrawMarkerTrajParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawMarkerTrajParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawMarkerTrajParams* internal_default_instance() {
    return reinterpret_cast<const DrawMarkerTrajParams*>(
               &_DrawMarkerTrajParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DrawMarkerTrajParams& a, DrawMarkerTrajParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawMarkerTrajParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawMarkerTrajParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawMarkerTrajParams* New() const final {
    return CreateMaybeMessage<DrawMarkerTrajParams>(nullptr);
  }

  DrawMarkerTrajParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawMarkerTrajParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawMarkerTrajParams& from);
  void MergeFrom(const DrawMarkerTrajParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawMarkerTrajParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.DrawMarkerTrajParams";
  }
  protected:
  explicit DrawMarkerTrajParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kColorFieldNumber = 6,
    kMaterialFieldNumber = 7,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kScaleFieldNumber = 5,
    kMarkerFieldNumber = 4,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required string material = 7;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // required float start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  float start() const;
  void set_start(float value);
  private:
  float _internal_start() const;
  void _internal_set_start(float value);
  public:

  // required float end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  float end() const;
  void set_end(float value);
  private:
  float _internal_end() const;
  void _internal_set_end(float value);
  public:

  // required float scale = 5;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // required .sl_pb.MarkerType marker = 4;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  ::sl_pb::MarkerType marker() const;
  void set_marker(::sl_pb::MarkerType value);
  private:
  ::sl_pb::MarkerType _internal_marker() const;
  void _internal_set_marker(::sl_pb::MarkerType value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.DrawMarkerTrajParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  float start_;
  float end_;
  float scale_;
  int marker_;
  friend struct ::TableStruct_viz_2eproto;
};
// -------------------------------------------------------------------

class HighlightParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.HighlightParams) */ {
 public:
  inline HighlightParams() : HighlightParams(nullptr) {}
  virtual ~HighlightParams();

  HighlightParams(const HighlightParams& from);
  HighlightParams(HighlightParams&& from) noexcept
    : HighlightParams() {
    *this = ::std::move(from);
  }

  inline HighlightParams& operator=(const HighlightParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighlightParams& operator=(HighlightParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HighlightParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HighlightParams* internal_default_instance() {
    return reinterpret_cast<const HighlightParams*>(
               &_HighlightParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HighlightParams& a, HighlightParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HighlightParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HighlightParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HighlightParams* New() const final {
    return CreateMaybeMessage<HighlightParams>(nullptr);
  }

  HighlightParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HighlightParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HighlightParams& from);
  void MergeFrom(const HighlightParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HighlightParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.HighlightParams";
  }
  protected:
  explicit HighlightParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kColorFieldNumber = 2,
    kMaterialFieldNumber = 3,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required string material = 3;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.HighlightParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  friend struct ::TableStruct_viz_2eproto;
};
// -------------------------------------------------------------------

class RemoveHighlightParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.RemoveHighlightParams) */ {
 public:
  inline RemoveHighlightParams() : RemoveHighlightParams(nullptr) {}
  virtual ~RemoveHighlightParams();

  RemoveHighlightParams(const RemoveHighlightParams& from);
  RemoveHighlightParams(RemoveHighlightParams&& from) noexcept
    : RemoveHighlightParams() {
    *this = ::std::move(from);
  }

  inline RemoveHighlightParams& operator=(const RemoveHighlightParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveHighlightParams& operator=(RemoveHighlightParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveHighlightParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveHighlightParams* internal_default_instance() {
    return reinterpret_cast<const RemoveHighlightParams*>(
               &_RemoveHighlightParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveHighlightParams& a, RemoveHighlightParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveHighlightParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveHighlightParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveHighlightParams* New() const final {
    return CreateMaybeMessage<RemoveHighlightParams>(nullptr);
  }

  RemoveHighlightParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveHighlightParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveHighlightParams& from);
  void MergeFrom(const RemoveHighlightParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveHighlightParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.RemoveHighlightParams";
  }
  protected:
  explicit RemoveHighlightParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.RemoveHighlightParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_viz_2eproto;
};
// -------------------------------------------------------------------

class LoadLevelParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.LoadLevelParams) */ {
 public:
  inline LoadLevelParams() : LoadLevelParams(nullptr) {}
  virtual ~LoadLevelParams();

  LoadLevelParams(const LoadLevelParams& from);
  LoadLevelParams(LoadLevelParams&& from) noexcept
    : LoadLevelParams() {
    *this = ::std::move(from);
  }

  inline LoadLevelParams& operator=(const LoadLevelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadLevelParams& operator=(LoadLevelParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadLevelParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadLevelParams* internal_default_instance() {
    return reinterpret_cast<const LoadLevelParams*>(
               &_LoadLevelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoadLevelParams& a, LoadLevelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadLevelParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadLevelParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadLevelParams* New() const final {
    return CreateMaybeMessage<LoadLevelParams>(nullptr);
  }

  LoadLevelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadLevelParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadLevelParams& from);
  void MergeFrom(const LoadLevelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadLevelParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.LoadLevelParams";
  }
  protected:
  explicit LoadLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_viz_2eproto);
    return ::descriptor_table_viz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // required string level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.LoadLevelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  friend struct ::TableStruct_viz_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetTaskParams

// required string task = 1;
inline bool SetTaskParams::_internal_has_task() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetTaskParams::has_task() const {
  return _internal_has_task();
}
inline void SetTaskParams::clear_task() {
  task_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetTaskParams::task() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetTaskParams.task)
  return _internal_task();
}
inline void SetTaskParams::set_task(const std::string& value) {
  _internal_set_task(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetTaskParams.task)
}
inline std::string* SetTaskParams::mutable_task() {
  // @@protoc_insertion_point(field_mutable:sl_pb.SetTaskParams.task)
  return _internal_mutable_task();
}
inline const std::string& SetTaskParams::_internal_task() const {
  return task_.Get();
}
inline void SetTaskParams::_internal_set_task(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetTaskParams::set_task(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.SetTaskParams.task)
}
inline void SetTaskParams::set_task(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.SetTaskParams.task)
}
inline void SetTaskParams::set_task(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.SetTaskParams.task)
}
inline std::string* SetTaskParams::_internal_mutable_task() {
  _has_bits_[0] |= 0x00000001u;
  return task_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetTaskParams::release_task() {
  // @@protoc_insertion_point(field_release:sl_pb.SetTaskParams.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTaskParams::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.SetTaskParams.task)
}

// -------------------------------------------------------------------

// SetEpisodeParams

// required string episode = 2;
inline bool SetEpisodeParams::_internal_has_episode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetEpisodeParams::has_episode() const {
  return _internal_has_episode();
}
inline void SetEpisodeParams::clear_episode() {
  episode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetEpisodeParams::episode() const {
  // @@protoc_insertion_point(field_get:sl_pb.SetEpisodeParams.episode)
  return _internal_episode();
}
inline void SetEpisodeParams::set_episode(const std::string& value) {
  _internal_set_episode(value);
  // @@protoc_insertion_point(field_set:sl_pb.SetEpisodeParams.episode)
}
inline std::string* SetEpisodeParams::mutable_episode() {
  // @@protoc_insertion_point(field_mutable:sl_pb.SetEpisodeParams.episode)
  return _internal_mutable_episode();
}
inline const std::string& SetEpisodeParams::_internal_episode() const {
  return episode_.Get();
}
inline void SetEpisodeParams::_internal_set_episode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  episode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetEpisodeParams::set_episode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  episode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.SetEpisodeParams.episode)
}
inline void SetEpisodeParams::set_episode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  episode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.SetEpisodeParams.episode)
}
inline void SetEpisodeParams::set_episode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  episode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.SetEpisodeParams.episode)
}
inline std::string* SetEpisodeParams::_internal_mutable_episode() {
  _has_bits_[0] |= 0x00000001u;
  return episode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetEpisodeParams::release_episode() {
  // @@protoc_insertion_point(field_release:sl_pb.SetEpisodeParams.episode)
  if (!_internal_has_episode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return episode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetEpisodeParams::set_allocated_episode(std::string* episode) {
  if (episode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  episode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), episode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.SetEpisodeParams.episode)
}

// -------------------------------------------------------------------

// DrawMarkerAtParams

// required string id = 1;
inline bool DrawMarkerAtParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawMarkerAtParams::has_id() const {
  return _internal_has_id();
}
inline void DrawMarkerAtParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawMarkerAtParams::id() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerAtParams.id)
  return _internal_id();
}
inline void DrawMarkerAtParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerAtParams.id)
}
inline std::string* DrawMarkerAtParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sl_pb.DrawMarkerAtParams.id)
  return _internal_mutable_id();
}
inline const std::string& DrawMarkerAtParams::_internal_id() const {
  return id_.Get();
}
inline void DrawMarkerAtParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawMarkerAtParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.DrawMarkerAtParams.id)
}
inline void DrawMarkerAtParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.DrawMarkerAtParams.id)
}
inline void DrawMarkerAtParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.DrawMarkerAtParams.id)
}
inline std::string* DrawMarkerAtParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawMarkerAtParams::release_id() {
  // @@protoc_insertion_point(field_release:sl_pb.DrawMarkerAtParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawMarkerAtParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.DrawMarkerAtParams.id)
}

// required float timestamp = 2;
inline bool DrawMarkerAtParams::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrawMarkerAtParams::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void DrawMarkerAtParams::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DrawMarkerAtParams::_internal_timestamp() const {
  return timestamp_;
}
inline float DrawMarkerAtParams::timestamp() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerAtParams.timestamp)
  return _internal_timestamp();
}
inline void DrawMarkerAtParams::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void DrawMarkerAtParams::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerAtParams.timestamp)
}

// required .sl_pb.MarkerType marker = 3;
inline bool DrawMarkerAtParams::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DrawMarkerAtParams::has_marker() const {
  return _internal_has_marker();
}
inline void DrawMarkerAtParams::clear_marker() {
  marker_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sl_pb::MarkerType DrawMarkerAtParams::_internal_marker() const {
  return static_cast< ::sl_pb::MarkerType >(marker_);
}
inline ::sl_pb::MarkerType DrawMarkerAtParams::marker() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerAtParams.marker)
  return _internal_marker();
}
inline void DrawMarkerAtParams::_internal_set_marker(::sl_pb::MarkerType value) {
  assert(::sl_pb::MarkerType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  marker_ = value;
}
inline void DrawMarkerAtParams::set_marker(::sl_pb::MarkerType value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerAtParams.marker)
}

// required float scale = 4;
inline bool DrawMarkerAtParams::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrawMarkerAtParams::has_scale() const {
  return _internal_has_scale();
}
inline void DrawMarkerAtParams::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DrawMarkerAtParams::_internal_scale() const {
  return scale_;
}
inline float DrawMarkerAtParams::scale() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerAtParams.scale)
  return _internal_scale();
}
inline void DrawMarkerAtParams::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  scale_ = value;
}
inline void DrawMarkerAtParams::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerAtParams.scale)
}

// required string color = 5;
inline bool DrawMarkerAtParams::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawMarkerAtParams::has_color() const {
  return _internal_has_color();
}
inline void DrawMarkerAtParams::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DrawMarkerAtParams::color() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerAtParams.color)
  return _internal_color();
}
inline void DrawMarkerAtParams::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerAtParams.color)
}
inline std::string* DrawMarkerAtParams::mutable_color() {
  // @@protoc_insertion_point(field_mutable:sl_pb.DrawMarkerAtParams.color)
  return _internal_mutable_color();
}
inline const std::string& DrawMarkerAtParams::_internal_color() const {
  return color_.Get();
}
inline void DrawMarkerAtParams::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawMarkerAtParams::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.DrawMarkerAtParams.color)
}
inline void DrawMarkerAtParams::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.DrawMarkerAtParams.color)
}
inline void DrawMarkerAtParams::set_color(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.DrawMarkerAtParams.color)
}
inline std::string* DrawMarkerAtParams::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawMarkerAtParams::release_color() {
  // @@protoc_insertion_point(field_release:sl_pb.DrawMarkerAtParams.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawMarkerAtParams::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.DrawMarkerAtParams.color)
}

// required string material = 6;
inline bool DrawMarkerAtParams::_internal_has_material() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawMarkerAtParams::has_material() const {
  return _internal_has_material();
}
inline void DrawMarkerAtParams::clear_material() {
  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DrawMarkerAtParams::material() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerAtParams.material)
  return _internal_material();
}
inline void DrawMarkerAtParams::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerAtParams.material)
}
inline std::string* DrawMarkerAtParams::mutable_material() {
  // @@protoc_insertion_point(field_mutable:sl_pb.DrawMarkerAtParams.material)
  return _internal_mutable_material();
}
inline const std::string& DrawMarkerAtParams::_internal_material() const {
  return material_.Get();
}
inline void DrawMarkerAtParams::_internal_set_material(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawMarkerAtParams::set_material(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.DrawMarkerAtParams.material)
}
inline void DrawMarkerAtParams::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.DrawMarkerAtParams.material)
}
inline void DrawMarkerAtParams::set_material(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.DrawMarkerAtParams.material)
}
inline std::string* DrawMarkerAtParams::_internal_mutable_material() {
  _has_bits_[0] |= 0x00000004u;
  return material_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawMarkerAtParams::release_material() {
  // @@protoc_insertion_point(field_release:sl_pb.DrawMarkerAtParams.material)
  if (!_internal_has_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return material_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawMarkerAtParams::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.DrawMarkerAtParams.material)
}

// -------------------------------------------------------------------

// DrawMarkerTrajParams

// required string id = 1;
inline bool DrawMarkerTrajParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_id() const {
  return _internal_has_id();
}
inline void DrawMarkerTrajParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawMarkerTrajParams::id() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.id)
  return _internal_id();
}
inline void DrawMarkerTrajParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.id)
}
inline std::string* DrawMarkerTrajParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sl_pb.DrawMarkerTrajParams.id)
  return _internal_mutable_id();
}
inline const std::string& DrawMarkerTrajParams::_internal_id() const {
  return id_.Get();
}
inline void DrawMarkerTrajParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawMarkerTrajParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.DrawMarkerTrajParams.id)
}
inline void DrawMarkerTrajParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.DrawMarkerTrajParams.id)
}
inline void DrawMarkerTrajParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.DrawMarkerTrajParams.id)
}
inline std::string* DrawMarkerTrajParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawMarkerTrajParams::release_id() {
  // @@protoc_insertion_point(field_release:sl_pb.DrawMarkerTrajParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawMarkerTrajParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.DrawMarkerTrajParams.id)
}

// required float start = 2;
inline bool DrawMarkerTrajParams::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_start() const {
  return _internal_has_start();
}
inline void DrawMarkerTrajParams::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DrawMarkerTrajParams::_internal_start() const {
  return start_;
}
inline float DrawMarkerTrajParams::start() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.start)
  return _internal_start();
}
inline void DrawMarkerTrajParams::_internal_set_start(float value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
}
inline void DrawMarkerTrajParams::set_start(float value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.start)
}

// required float end = 3;
inline bool DrawMarkerTrajParams::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_end() const {
  return _internal_has_end();
}
inline void DrawMarkerTrajParams::clear_end() {
  end_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DrawMarkerTrajParams::_internal_end() const {
  return end_;
}
inline float DrawMarkerTrajParams::end() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.end)
  return _internal_end();
}
inline void DrawMarkerTrajParams::_internal_set_end(float value) {
  _has_bits_[0] |= 0x00000010u;
  end_ = value;
}
inline void DrawMarkerTrajParams::set_end(float value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.end)
}

// required .sl_pb.MarkerType marker = 4;
inline bool DrawMarkerTrajParams::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_marker() const {
  return _internal_has_marker();
}
inline void DrawMarkerTrajParams::clear_marker() {
  marker_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::sl_pb::MarkerType DrawMarkerTrajParams::_internal_marker() const {
  return static_cast< ::sl_pb::MarkerType >(marker_);
}
inline ::sl_pb::MarkerType DrawMarkerTrajParams::marker() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.marker)
  return _internal_marker();
}
inline void DrawMarkerTrajParams::_internal_set_marker(::sl_pb::MarkerType value) {
  assert(::sl_pb::MarkerType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  marker_ = value;
}
inline void DrawMarkerTrajParams::set_marker(::sl_pb::MarkerType value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.marker)
}

// required float scale = 5;
inline bool DrawMarkerTrajParams::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_scale() const {
  return _internal_has_scale();
}
inline void DrawMarkerTrajParams::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float DrawMarkerTrajParams::_internal_scale() const {
  return scale_;
}
inline float DrawMarkerTrajParams::scale() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.scale)
  return _internal_scale();
}
inline void DrawMarkerTrajParams::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000020u;
  scale_ = value;
}
inline void DrawMarkerTrajParams::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.scale)
}

// required string color = 6;
inline bool DrawMarkerTrajParams::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_color() const {
  return _internal_has_color();
}
inline void DrawMarkerTrajParams::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DrawMarkerTrajParams::color() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.color)
  return _internal_color();
}
inline void DrawMarkerTrajParams::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.color)
}
inline std::string* DrawMarkerTrajParams::mutable_color() {
  // @@protoc_insertion_point(field_mutable:sl_pb.DrawMarkerTrajParams.color)
  return _internal_mutable_color();
}
inline const std::string& DrawMarkerTrajParams::_internal_color() const {
  return color_.Get();
}
inline void DrawMarkerTrajParams::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawMarkerTrajParams::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.DrawMarkerTrajParams.color)
}
inline void DrawMarkerTrajParams::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.DrawMarkerTrajParams.color)
}
inline void DrawMarkerTrajParams::set_color(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.DrawMarkerTrajParams.color)
}
inline std::string* DrawMarkerTrajParams::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawMarkerTrajParams::release_color() {
  // @@protoc_insertion_point(field_release:sl_pb.DrawMarkerTrajParams.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawMarkerTrajParams::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.DrawMarkerTrajParams.color)
}

// required string material = 7;
inline bool DrawMarkerTrajParams::_internal_has_material() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawMarkerTrajParams::has_material() const {
  return _internal_has_material();
}
inline void DrawMarkerTrajParams::clear_material() {
  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DrawMarkerTrajParams::material() const {
  // @@protoc_insertion_point(field_get:sl_pb.DrawMarkerTrajParams.material)
  return _internal_material();
}
inline void DrawMarkerTrajParams::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:sl_pb.DrawMarkerTrajParams.material)
}
inline std::string* DrawMarkerTrajParams::mutable_material() {
  // @@protoc_insertion_point(field_mutable:sl_pb.DrawMarkerTrajParams.material)
  return _internal_mutable_material();
}
inline const std::string& DrawMarkerTrajParams::_internal_material() const {
  return material_.Get();
}
inline void DrawMarkerTrajParams::_internal_set_material(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawMarkerTrajParams::set_material(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.DrawMarkerTrajParams.material)
}
inline void DrawMarkerTrajParams::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.DrawMarkerTrajParams.material)
}
inline void DrawMarkerTrajParams::set_material(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.DrawMarkerTrajParams.material)
}
inline std::string* DrawMarkerTrajParams::_internal_mutable_material() {
  _has_bits_[0] |= 0x00000004u;
  return material_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawMarkerTrajParams::release_material() {
  // @@protoc_insertion_point(field_release:sl_pb.DrawMarkerTrajParams.material)
  if (!_internal_has_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return material_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawMarkerTrajParams::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.DrawMarkerTrajParams.material)
}

// -------------------------------------------------------------------

// HighlightParams

// required string id = 1;
inline bool HighlightParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HighlightParams::has_id() const {
  return _internal_has_id();
}
inline void HighlightParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HighlightParams::id() const {
  // @@protoc_insertion_point(field_get:sl_pb.HighlightParams.id)
  return _internal_id();
}
inline void HighlightParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sl_pb.HighlightParams.id)
}
inline std::string* HighlightParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sl_pb.HighlightParams.id)
  return _internal_mutable_id();
}
inline const std::string& HighlightParams::_internal_id() const {
  return id_.Get();
}
inline void HighlightParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HighlightParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.HighlightParams.id)
}
inline void HighlightParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.HighlightParams.id)
}
inline void HighlightParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.HighlightParams.id)
}
inline std::string* HighlightParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HighlightParams::release_id() {
  // @@protoc_insertion_point(field_release:sl_pb.HighlightParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HighlightParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.HighlightParams.id)
}

// required string color = 2;
inline bool HighlightParams::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HighlightParams::has_color() const {
  return _internal_has_color();
}
inline void HighlightParams::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HighlightParams::color() const {
  // @@protoc_insertion_point(field_get:sl_pb.HighlightParams.color)
  return _internal_color();
}
inline void HighlightParams::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:sl_pb.HighlightParams.color)
}
inline std::string* HighlightParams::mutable_color() {
  // @@protoc_insertion_point(field_mutable:sl_pb.HighlightParams.color)
  return _internal_mutable_color();
}
inline const std::string& HighlightParams::_internal_color() const {
  return color_.Get();
}
inline void HighlightParams::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HighlightParams::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.HighlightParams.color)
}
inline void HighlightParams::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.HighlightParams.color)
}
inline void HighlightParams::set_color(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.HighlightParams.color)
}
inline std::string* HighlightParams::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HighlightParams::release_color() {
  // @@protoc_insertion_point(field_release:sl_pb.HighlightParams.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HighlightParams::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.HighlightParams.color)
}

// required string material = 3;
inline bool HighlightParams::_internal_has_material() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HighlightParams::has_material() const {
  return _internal_has_material();
}
inline void HighlightParams::clear_material() {
  material_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HighlightParams::material() const {
  // @@protoc_insertion_point(field_get:sl_pb.HighlightParams.material)
  return _internal_material();
}
inline void HighlightParams::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:sl_pb.HighlightParams.material)
}
inline std::string* HighlightParams::mutable_material() {
  // @@protoc_insertion_point(field_mutable:sl_pb.HighlightParams.material)
  return _internal_mutable_material();
}
inline const std::string& HighlightParams::_internal_material() const {
  return material_.Get();
}
inline void HighlightParams::_internal_set_material(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HighlightParams::set_material(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.HighlightParams.material)
}
inline void HighlightParams::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.HighlightParams.material)
}
inline void HighlightParams::set_material(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.HighlightParams.material)
}
inline std::string* HighlightParams::_internal_mutable_material() {
  _has_bits_[0] |= 0x00000004u;
  return material_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HighlightParams::release_material() {
  // @@protoc_insertion_point(field_release:sl_pb.HighlightParams.material)
  if (!_internal_has_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return material_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HighlightParams::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.HighlightParams.material)
}

// -------------------------------------------------------------------

// RemoveHighlightParams

// required string id = 1;
inline bool RemoveHighlightParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoveHighlightParams::has_id() const {
  return _internal_has_id();
}
inline void RemoveHighlightParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RemoveHighlightParams::id() const {
  // @@protoc_insertion_point(field_get:sl_pb.RemoveHighlightParams.id)
  return _internal_id();
}
inline void RemoveHighlightParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sl_pb.RemoveHighlightParams.id)
}
inline std::string* RemoveHighlightParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sl_pb.RemoveHighlightParams.id)
  return _internal_mutable_id();
}
inline const std::string& RemoveHighlightParams::_internal_id() const {
  return id_.Get();
}
inline void RemoveHighlightParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveHighlightParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.RemoveHighlightParams.id)
}
inline void RemoveHighlightParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.RemoveHighlightParams.id)
}
inline void RemoveHighlightParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.RemoveHighlightParams.id)
}
inline std::string* RemoveHighlightParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveHighlightParams::release_id() {
  // @@protoc_insertion_point(field_release:sl_pb.RemoveHighlightParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveHighlightParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.RemoveHighlightParams.id)
}

// -------------------------------------------------------------------

// LoadLevelParams

// required string level = 1;
inline bool LoadLevelParams::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadLevelParams::has_level() const {
  return _internal_has_level();
}
inline void LoadLevelParams::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoadLevelParams::level() const {
  // @@protoc_insertion_point(field_get:sl_pb.LoadLevelParams.level)
  return _internal_level();
}
inline void LoadLevelParams::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:sl_pb.LoadLevelParams.level)
}
inline std::string* LoadLevelParams::mutable_level() {
  // @@protoc_insertion_point(field_mutable:sl_pb.LoadLevelParams.level)
  return _internal_mutable_level();
}
inline const std::string& LoadLevelParams::_internal_level() const {
  return level_.Get();
}
inline void LoadLevelParams::_internal_set_level(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadLevelParams::set_level(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sl_pb.LoadLevelParams.level)
}
inline void LoadLevelParams::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sl_pb.LoadLevelParams.level)
}
inline void LoadLevelParams::set_level(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sl_pb.LoadLevelParams.level)
}
inline std::string* LoadLevelParams::_internal_mutable_level() {
  _has_bits_[0] |= 0x00000001u;
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadLevelParams::release_level() {
  // @@protoc_insertion_point(field_release:sl_pb.LoadLevelParams.level)
  if (!_internal_has_level()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return level_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadLevelParams::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sl_pb.LoadLevelParams.level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sl_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sl_pb::MarkerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sl_pb::MarkerType>() {
  return ::sl_pb::MarkerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_viz_2eproto
